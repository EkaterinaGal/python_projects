{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Let's start with importing all the necessary libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from sklearn.model_selection import train_test_split\n",
    "from imblearn.over_sampling import SMOTE\n",
    "get_ipython().run_line_magic('matplotlib', 'inline')\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "#use the following commands if some of the modules are not installed:\n",
    "#conda install joblib\n",
    "#conda install -c conda-forge imbalanced-learn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Join the four tables into one dataset and further split it in two (60/40):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(969, 36)\n",
      "(646, 36)\n"
     ]
    }
   ],
   "source": [
    "#import data from the file\n",
    "Soc_Dem = pd.read_excel('~/Desktop/DMML_Project_Dataset.xlsx', sheet_name=\"Soc_Dem\")\n",
    "Act_Prod = pd.read_excel('~/Desktop/DMML_Project_Dataset.xlsx', sheet_name=\"Products_ActBalance\")\n",
    "Flow = pd.read_excel('~/Desktop/DMML_Project_Dataset.xlsx', sheet_name=\"Inflow_Outflow\")\n",
    "Sales_Rev = pd.read_excel('~/Desktop/DMML_Project_Dataset.xlsx', sheet_name=\"Sales_Revenues\")\n",
    "\n",
    "#join the tables\n",
    "Soc_Dem = Soc_Dem.sort_values(by=['Client'])\n",
    "Act_Prod = Act_Prod.sort_values(by=['Client'])\n",
    "Flow = Flow.sort_values(by=['Client'])\n",
    "Sales_Rev = Sales_Rev.sort_values(by=['Client'])\n",
    "\n",
    "merge_1 = pd.merge(Soc_Dem, Act_Prod, how='left', on=['Client'])\n",
    "merge_2 = pd.merge(merge_1, Flow, how='left', on=['Client'])\n",
    "final = pd.merge(merge_2, Sales_Rev, how='left', on=['Client'])\n",
    "\n",
    "#create a set for 60% of clients in the dataset which will be used for training models (we know outcome for these clients)\n",
    "main_right = pd.merge(Flow, Sales_Rev, how='right', on=['Client'])\n",
    "main = pd.merge (merge_1, main_right, how = 'right', on = ['Client'])\n",
    "\n",
    "#create a set for 40% of clients in the dataset which will be used for predicting 100 customers\n",
    "predict = pd.concat([final,main],ignore_index=True)\n",
    "predict = predict.drop_duplicates(subset='Client',keep=False)\n",
    "\n",
    "print(main.shape)\n",
    "print(predict.shape) #we set aside this DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#set Client column as an index:\n",
    "main.set_index('Client', inplace=True)\n",
    "predict.set_index('Client', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>Count_SA</th>\n",
       "      <th>Count_MF</th>\n",
       "      <th>Count_OVD</th>\n",
       "      <th>Count_CC</th>\n",
       "      <th>Count_CL</th>\n",
       "      <th>ActBal_CA</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "      <th>Sale_MF</th>\n",
       "      <th>Sale_CC</th>\n",
       "      <th>Sale_CL</th>\n",
       "      <th>Revenue_MF</th>\n",
       "      <th>Revenue_CC</th>\n",
       "      <th>Revenue_CL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>51</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1333.802857</td>\n",
       "      <td>...</td>\n",
       "      <td>30.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.972679</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>43</td>\n",
       "      <td>152</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.768571</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>F</td>\n",
       "      <td>24</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.297143</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>F</td>\n",
       "      <td>64</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>24.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>F</td>\n",
       "      <td>66</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>353.839643</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Sex  Age  Tenure  Count_CA  Count_SA  Count_MF  Count_OVD  Count_CC  \\\n",
       "Client                                                                       \n",
       "1        F   51       7         1       NaN       NaN        1.0       NaN   \n",
       "2        M   43     152         1       1.0       NaN        NaN       NaN   \n",
       "6        F   24      19         1       NaN       NaN        NaN       NaN   \n",
       "8        F   64      30         1       NaN       NaN        1.0       NaN   \n",
       "13       F   66     132         1       1.0       NaN        NaN       NaN   \n",
       "\n",
       "        Count_CL    ActBal_CA     ...      TransactionsDeb_CA  \\\n",
       "Client                            ...                           \n",
       "1            NaN  1333.802857     ...                    30.0   \n",
       "2            NaN   110.768571     ...                     6.0   \n",
       "6            1.0     4.297143     ...                     6.0   \n",
       "8            NaN     0.000000     ...                    24.0   \n",
       "13           1.0   353.839643     ...                    39.0   \n",
       "\n",
       "        TransactionsDebCash_Card  TransactionsDebCashless_Card  \\\n",
       "Client                                                           \n",
       "1                            3.0                          12.0   \n",
       "2                            2.0                           2.0   \n",
       "6                            1.0                           0.0   \n",
       "8                           10.0                           1.0   \n",
       "13                           6.0                          17.0   \n",
       "\n",
       "        TransactionsDeb_PaymentOrder  Sale_MF  Sale_CC  Sale_CL  Revenue_MF  \\\n",
       "Client                                                                        \n",
       "1                                9.0        1        0        0   26.972679   \n",
       "2                                1.0        0        0        0    0.000000   \n",
       "6                                0.0        0        0        0    0.000000   \n",
       "8                                0.0        0        0        0    0.000000   \n",
       "13                              10.0        0        0        0    0.000000   \n",
       "\n",
       "        Revenue_CC  Revenue_CL  \n",
       "Client                          \n",
       "1              0.0         0.0  \n",
       "2              0.0         0.0  \n",
       "6              0.0         0.0  \n",
       "8              0.0         0.0  \n",
       "13             0.0         0.0  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#inspect data\n",
    "main.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>Count_SA</th>\n",
       "      <th>Count_MF</th>\n",
       "      <th>Count_OVD</th>\n",
       "      <th>Count_CC</th>\n",
       "      <th>Count_CL</th>\n",
       "      <th>ActBal_CA</th>\n",
       "      <th>ActBal_SA</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "      <th>Sale_MF</th>\n",
       "      <th>Sale_CC</th>\n",
       "      <th>Sale_CL</th>\n",
       "      <th>Revenue_MF</th>\n",
       "      <th>Revenue_CC</th>\n",
       "      <th>Revenue_CL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>184.000000</td>\n",
       "      <td>251.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>951.000000</td>\n",
       "      <td>951.000000</td>\n",
       "      <td>951.000000</td>\n",
       "      <td>951.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "      <td>969.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>42.983488</td>\n",
       "      <td>100.393189</td>\n",
       "      <td>1.075335</td>\n",
       "      <td>1.181132</td>\n",
       "      <td>5.179348</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.113924</td>\n",
       "      <td>2493.026329</td>\n",
       "      <td>14427.773550</td>\n",
       "      <td>...</td>\n",
       "      <td>13.821241</td>\n",
       "      <td>2.018927</td>\n",
       "      <td>5.360673</td>\n",
       "      <td>4.629863</td>\n",
       "      <td>0.199174</td>\n",
       "      <td>0.249742</td>\n",
       "      <td>0.299278</td>\n",
       "      <td>1.925015</td>\n",
       "      <td>2.712827</td>\n",
       "      <td>3.604220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>18.578951</td>\n",
       "      <td>65.437097</td>\n",
       "      <td>0.323815</td>\n",
       "      <td>0.457702</td>\n",
       "      <td>9.354897</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.319749</td>\n",
       "      <td>6268.027982</td>\n",
       "      <td>32615.370810</td>\n",
       "      <td>...</td>\n",
       "      <td>13.003061</td>\n",
       "      <td>2.709760</td>\n",
       "      <td>8.376615</td>\n",
       "      <td>5.236684</td>\n",
       "      <td>0.399586</td>\n",
       "      <td>0.433087</td>\n",
       "      <td>0.458178</td>\n",
       "      <td>9.943601</td>\n",
       "      <td>17.693433</td>\n",
       "      <td>7.743618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>73.135000</td>\n",
       "      <td>725.631429</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>41.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>536.951429</td>\n",
       "      <td>4352.067857</td>\n",
       "      <td>...</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>57.000000</td>\n",
       "      <td>151.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2262.178929</td>\n",
       "      <td>13326.190357</td>\n",
       "      <td>...</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.642857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>271.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>74934.956071</td>\n",
       "      <td>389883.830714</td>\n",
       "      <td>...</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>220.488214</td>\n",
       "      <td>407.962500</td>\n",
       "      <td>133.275357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Age      Tenure    Count_CA    Count_SA    Count_MF  Count_OVD  \\\n",
       "count  969.000000  969.000000  969.000000  265.000000  184.000000      251.0   \n",
       "mean    42.983488  100.393189    1.075335    1.181132    5.179348        1.0   \n",
       "std     18.578951   65.437097    0.323815    0.457702    9.354897        0.0   \n",
       "min      0.000000    0.000000    1.000000    1.000000    1.000000        1.0   \n",
       "25%     29.000000   42.000000    1.000000    1.000000    1.000000        1.0   \n",
       "50%     41.000000   95.000000    1.000000    1.000000    2.000000        1.0   \n",
       "75%     57.000000  151.000000    1.000000    1.000000    5.000000        1.0   \n",
       "max     90.000000  271.000000    4.000000    3.000000   79.000000        1.0   \n",
       "\n",
       "       Count_CC   Count_CL     ActBal_CA      ActBal_SA     ...      \\\n",
       "count     110.0  79.000000    969.000000     265.000000     ...       \n",
       "mean        1.0   1.113924   2493.026329   14427.773550     ...       \n",
       "std         0.0   0.319749   6268.027982   32615.370810     ...       \n",
       "min         1.0   1.000000      0.000000       0.000000     ...       \n",
       "25%         1.0   1.000000     73.135000     725.631429     ...       \n",
       "50%         1.0   1.000000    536.951429    4352.067857     ...       \n",
       "75%         1.0   1.000000   2262.178929   13326.190357     ...       \n",
       "max         1.0   2.000000  74934.956071  389883.830714     ...       \n",
       "\n",
       "       TransactionsDeb_CA  TransactionsDebCash_Card  \\\n",
       "count          951.000000                951.000000   \n",
       "mean            13.821241                  2.018927   \n",
       "std             13.003061                  2.709760   \n",
       "min              0.000000                  0.000000   \n",
       "25%              4.000000                  0.000000   \n",
       "50%             11.000000                  1.000000   \n",
       "75%             19.000000                  3.000000   \n",
       "max             83.000000                 25.000000   \n",
       "\n",
       "       TransactionsDebCashless_Card  TransactionsDeb_PaymentOrder     Sale_MF  \\\n",
       "count                    951.000000                    951.000000  969.000000   \n",
       "mean                       5.360673                      4.629863    0.199174   \n",
       "std                        8.376615                      5.236684    0.399586   \n",
       "min                        0.000000                      0.000000    0.000000   \n",
       "25%                        0.000000                      0.000000    0.000000   \n",
       "50%                        1.000000                      3.000000    0.000000   \n",
       "75%                        7.000000                      7.000000    0.000000   \n",
       "max                       60.000000                     34.000000    1.000000   \n",
       "\n",
       "          Sale_CC     Sale_CL  Revenue_MF  Revenue_CC  Revenue_CL  \n",
       "count  969.000000  969.000000  969.000000  969.000000  969.000000  \n",
       "mean     0.249742    0.299278    1.925015    2.712827    3.604220  \n",
       "std      0.433087    0.458178    9.943601   17.693433    7.743618  \n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000  \n",
       "25%      0.000000    0.000000    0.000000    0.000000    0.000000  \n",
       "50%      0.000000    0.000000    0.000000    0.000000    0.000000  \n",
       "75%      0.000000    1.000000    0.000000    0.000000    4.642857  \n",
       "max      1.000000    1.000000  220.488214  407.962500  133.275357  \n",
       "\n",
       "[8 rows x 34 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#summary statistics\n",
    "main.describe()\n",
    "\n",
    "#we noticed that data is skewed and it contains a lot of outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 969 entries, 1 to 1615\n",
      "Data columns (total 35 columns):\n",
      "Sex                             967 non-null object\n",
      "Age                             969 non-null int64\n",
      "Tenure                          969 non-null int64\n",
      "Count_CA                        969 non-null int64\n",
      "Count_SA                        265 non-null float64\n",
      "Count_MF                        184 non-null float64\n",
      "Count_OVD                       251 non-null float64\n",
      "Count_CC                        110 non-null float64\n",
      "Count_CL                        79 non-null float64\n",
      "ActBal_CA                       969 non-null float64\n",
      "ActBal_SA                       265 non-null float64\n",
      "ActBal_MF                       184 non-null float64\n",
      "ActBal_OVD                      251 non-null float64\n",
      "ActBal_CC                       110 non-null float64\n",
      "ActBal_CL                       79 non-null float64\n",
      "VolumeCred                      951 non-null float64\n",
      "VolumeCred_CA                   951 non-null float64\n",
      "TransactionsCred                951 non-null float64\n",
      "TransactionsCred_CA             951 non-null float64\n",
      "VolumeDeb                       951 non-null float64\n",
      "VolumeDeb_CA                    951 non-null float64\n",
      "VolumeDebCash_Card              951 non-null float64\n",
      "VolumeDebCashless_Card          951 non-null float64\n",
      "VolumeDeb_PaymentOrder          951 non-null float64\n",
      "TransactionsDeb                 951 non-null float64\n",
      "TransactionsDeb_CA              951 non-null float64\n",
      "TransactionsDebCash_Card        951 non-null float64\n",
      "TransactionsDebCashless_Card    951 non-null float64\n",
      "TransactionsDeb_PaymentOrder    951 non-null float64\n",
      "Sale_MF                         969 non-null int64\n",
      "Sale_CC                         969 non-null int64\n",
      "Sale_CL                         969 non-null int64\n",
      "Revenue_MF                      969 non-null float64\n",
      "Revenue_CC                      969 non-null float64\n",
      "Revenue_CL                      969 non-null float64\n",
      "dtypes: float64(28), int64(6), object(1)\n",
      "memory usage: 272.5+ KB\n"
     ]
    }
   ],
   "source": [
    "#information about variables\n",
    "main.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Inspect missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#find out missing values\n",
    "def missing_values_table(df):\n",
    "        mis_val = df.isnull().sum()\n",
    "        mis_val_percent = 100 * df.isnull().sum() / len(df)\n",
    "        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n",
    "        mis_val_table_ren_columns = mis_val_table.rename(\n",
    "        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n",
    "        mis_val_table_ren_columns = mis_val_table_ren_columns[mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n",
    "        '% of Total Values', ascending=False).round(1)\n",
    "        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n",
    "            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n",
    "              \" columns that have missing values.\")\n",
    "        \n",
    "#return the dataframe with missing information\n",
    "        return mis_val_table_ren_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your selected dataframe has 35 columns.\n",
      "There are 25 columns that have missing values.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Missing Values</th>\n",
       "      <th>% of Total Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Count_CL</th>\n",
       "      <td>890</td>\n",
       "      <td>91.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ActBal_CL</th>\n",
       "      <td>890</td>\n",
       "      <td>91.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Count_CC</th>\n",
       "      <td>859</td>\n",
       "      <td>88.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ActBal_CC</th>\n",
       "      <td>859</td>\n",
       "      <td>88.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Count_MF</th>\n",
       "      <td>785</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ActBal_MF</th>\n",
       "      <td>785</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ActBal_OVD</th>\n",
       "      <td>718</td>\n",
       "      <td>74.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Count_OVD</th>\n",
       "      <td>718</td>\n",
       "      <td>74.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ActBal_SA</th>\n",
       "      <td>704</td>\n",
       "      <td>72.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Count_SA</th>\n",
       "      <td>704</td>\n",
       "      <td>72.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsDeb</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeCred_CA</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeDebCashless_Card</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeDeb_PaymentOrder</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeDebCash_Card</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeDeb_CA</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeDeb</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsCred_CA</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TransactionsCred</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VolumeCred</th>\n",
       "      <td>18</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>2</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              Missing Values  % of Total Values\n",
       "Count_CL                                 890               91.8\n",
       "ActBal_CL                                890               91.8\n",
       "Count_CC                                 859               88.6\n",
       "ActBal_CC                                859               88.6\n",
       "Count_MF                                 785               81.0\n",
       "ActBal_MF                                785               81.0\n",
       "ActBal_OVD                               718               74.1\n",
       "Count_OVD                                718               74.1\n",
       "ActBal_SA                                704               72.7\n",
       "Count_SA                                 704               72.7\n",
       "TransactionsDebCash_Card                  18                1.9\n",
       "TransactionsDeb                           18                1.9\n",
       "TransactionsDeb_CA                        18                1.9\n",
       "VolumeCred_CA                             18                1.9\n",
       "TransactionsDebCashless_Card              18                1.9\n",
       "VolumeDebCashless_Card                    18                1.9\n",
       "VolumeDeb_PaymentOrder                    18                1.9\n",
       "TransactionsDeb_PaymentOrder              18                1.9\n",
       "VolumeDebCash_Card                        18                1.9\n",
       "VolumeDeb_CA                              18                1.9\n",
       "VolumeDeb                                 18                1.9\n",
       "TransactionsCred_CA                       18                1.9\n",
       "TransactionsCred                          18                1.9\n",
       "VolumeCred                                18                1.9\n",
       "Sex                                        2                0.2"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#find out how many missing values there are in main DF\n",
    "missing_values_table(main)\n",
    "\n",
    "#columns Count_CL, ActBal_CL, Count_CC, ActBal_CC, Count_MF, ActBal_MF, ActBal_OVD, Count_OVD, ActBal_SA, Count_SA \n",
    "#contain more than 70% of NaN variables will be deleted."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data cleaning and preprocessing. Treating missing values & categorical variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#we have quite many missing values. It's time to theat them.\n",
    "\n",
    "#first, impute the 2 missing Sex variables with the most common category:\n",
    "main['Sex'].fillna(main['Sex'].value_counts().index[0], inplace=True)\n",
    "\n",
    "#second, replace all the NaN values with zero values\n",
    "main = main.replace(np.nan, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(909, 37)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>Count_SA</th>\n",
       "      <th>Count_MF</th>\n",
       "      <th>Count_OVD</th>\n",
       "      <th>Count_CC</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "      <th>Sale_MF</th>\n",
       "      <th>Sale_CC</th>\n",
       "      <th>Sale_CL</th>\n",
       "      <th>Revenue_MF</th>\n",
       "      <th>Revenue_CC</th>\n",
       "      <th>Revenue_CL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>51</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>30.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.972679</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>43</td>\n",
       "      <td>152</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>24</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>64</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>24.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>66</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        F  M Sex  Age  Tenure  Count_CA  Count_SA  Count_MF  Count_OVD  \\\n",
       "Client                                                                   \n",
       "1       1  0   F   51       7         1       0.0       0.0        1.0   \n",
       "2       0  1   M   43     152         1       1.0       0.0        0.0   \n",
       "6       1  0   F   24      19         1       0.0       0.0        0.0   \n",
       "8       1  0   F   64      30         1       0.0       0.0        1.0   \n",
       "13      1  0   F   66     132         1       1.0       0.0        0.0   \n",
       "\n",
       "        Count_CC     ...      TransactionsDeb_CA  TransactionsDebCash_Card  \\\n",
       "Client               ...                                                     \n",
       "1            0.0     ...                    30.0                       3.0   \n",
       "2            0.0     ...                     6.0                       2.0   \n",
       "6            0.0     ...                     6.0                       1.0   \n",
       "8            0.0     ...                    24.0                      10.0   \n",
       "13           0.0     ...                    39.0                       6.0   \n",
       "\n",
       "        TransactionsDebCashless_Card  TransactionsDeb_PaymentOrder  Sale_MF  \\\n",
       "Client                                                                        \n",
       "1                               12.0                           9.0        1   \n",
       "2                                2.0                           1.0        0   \n",
       "6                                0.0                           0.0        0   \n",
       "8                                1.0                           0.0        0   \n",
       "13                              17.0                          10.0        0   \n",
       "\n",
       "        Sale_CC  Sale_CL  Revenue_MF  Revenue_CC  Revenue_CL  \n",
       "Client                                                        \n",
       "1             0        0   26.972679         0.0         0.0  \n",
       "2             0        0    0.000000         0.0         0.0  \n",
       "6             0        0    0.000000         0.0         0.0  \n",
       "8             0        0    0.000000         0.0         0.0  \n",
       "13            0        0    0.000000         0.0         0.0  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#now we need to replace categorical variable 'Sex' with dummy variables:\n",
    "\n",
    "#create dummy variables for Sex feature\n",
    "sex_dummies = pd.get_dummies(main['Sex'])\n",
    "main = pd.concat([sex_dummies, main], axis = 1)\n",
    "\n",
    "#obviously, customers younger than 18 are not interested in any of the products.\n",
    "#their saving accounts were created by their parents in order to be used for future needs (education etc.).\n",
    "#thus, such customers could be deleted from the dataset.\n",
    "\n",
    "#get observations for which column Age has value lower than 18:\n",
    "under18 = main[main['Age'] < 18].index\n",
    "\n",
    "#delete these rows from DataFrame:\n",
    "main = main.drop(under18)\n",
    "\n",
    "print(main.shape) #Now we have 909 observations instead of 969.\n",
    "main.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# We do the same transformations with the data set we set aside for making predictions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(606, 37)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>Count_SA</th>\n",
       "      <th>Count_MF</th>\n",
       "      <th>Count_OVD</th>\n",
       "      <th>Count_CC</th>\n",
       "      <th>...</th>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "      <th>Sale_MF</th>\n",
       "      <th>Sale_CC</th>\n",
       "      <th>Sale_CL</th>\n",
       "      <th>Revenue_MF</th>\n",
       "      <th>Revenue_CC</th>\n",
       "      <th>Revenue_CL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>24</td>\n",
       "      <td>153</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>36.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>58</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>41.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>55</td>\n",
       "      <td>227</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>33</td>\n",
       "      <td>182</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>29</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        F  M Sex  Age  Tenure  Count_CA  Count_SA  Count_MF  Count_OVD  \\\n",
       "Client                                                                   \n",
       "4       0  1   M   24     153         1       1.0       0.0        0.0   \n",
       "5       1  0   F   58     200         1       1.0       0.0        0.0   \n",
       "7       1  0   F   55     227         1       0.0       0.0        0.0   \n",
       "9       1  0   F   33     182         1       0.0       0.0        1.0   \n",
       "10      1  0   F   29      48         1       1.0       0.0        0.0   \n",
       "\n",
       "        Count_CC     ...      TransactionsDeb_CA  TransactionsDebCash_Card  \\\n",
       "Client               ...                                                     \n",
       "4            1.0     ...                    36.0                       6.0   \n",
       "5            0.0     ...                    41.0                       4.0   \n",
       "7            0.0     ...                    10.0                       1.0   \n",
       "9            0.0     ...                     7.0                       1.0   \n",
       "10           0.0     ...                     1.0                       0.0   \n",
       "\n",
       "        TransactionsDebCashless_Card  TransactionsDeb_PaymentOrder  Sale_MF  \\\n",
       "Client                                                                        \n",
       "4                               12.0                          13.0      0.0   \n",
       "5                               17.0                          13.0      0.0   \n",
       "7                                6.0                           1.0      0.0   \n",
       "9                                0.0                           3.0      0.0   \n",
       "10                               0.0                           0.0      0.0   \n",
       "\n",
       "        Sale_CC  Sale_CL  Revenue_MF  Revenue_CC  Revenue_CL  \n",
       "Client                                                        \n",
       "4           0.0      0.0         0.0         0.0         0.0  \n",
       "5           0.0      0.0         0.0         0.0         0.0  \n",
       "7           0.0      0.0         0.0         0.0         0.0  \n",
       "9           0.0      0.0         0.0         0.0         0.0  \n",
       "10          0.0      0.0         0.0         0.0         0.0  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#First, impute the 2 missing Sex variables with the most common category\n",
    "predict['Sex'].fillna(predict['Sex'].value_counts().index[0], inplace=True)\n",
    "\n",
    "#Second, replace all the NaN values with zero values\n",
    "predict = predict.replace(np.nan, 0)\n",
    "\n",
    "#Now we need to replace categories with dummy variables.\n",
    "#create dummy variables for Sex feature\n",
    "sex_dummies = pd.get_dummies(predict['Sex'])\n",
    "predict = pd.concat([sex_dummies, predict], axis = 1)\n",
    "\n",
    "# Get observations for which column Age has value lower than 18\n",
    "under18 = predict[predict['Age'] < 18].index\n",
    "\n",
    "# Delete these rows from dataFrame\n",
    "predict = predict.drop(under18)\n",
    "print(predict.shape) # We got 606 observations instead of 646.\n",
    "predict.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(909, 26)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop columns that contain more than 70% of missing values.\n",
    "#drop 'Sex' column as we have already created dummy variables for this categorical variable:\n",
    "\n",
    "main = main.drop([\"Count_SA\",\"Count_MF\",\"Count_OVD\",\"Count_CC\",\n",
    "                   \"Count_CL\",\"ActBal_MF\",\"ActBal_SA\",\"ActBal_OVD\",\"ActBal_CC\",\"ActBal_CL\", 'Sex'],axis=1)\n",
    "main.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Visualisation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#as we have previously noticed, our data is skewed and contains a lot of outliers.\n",
    "#let's visualise some of the variables with histograms:\n",
    "\n",
    "main.loc[:,['Age', 'Tenure', 'ActBal_CA','VolumeCred',\n",
    "                  'VolumeCred_CA', 'VolumeDeb', 'VolumeDeb_CA', 'VolumeDebCash_Card', \n",
    "                  'VolumeDebCashless_Card']].hist(bins = 50, figsize = (20, 15))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['F', 'M', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA', 'VolumeCred',\n",
       "       'VolumeCred_CA', 'TransactionsCred', 'TransactionsCred_CA', 'VolumeDeb',\n",
       "       'VolumeDeb_CA', 'VolumeDebCash_Card', 'VolumeDebCashless_Card',\n",
       "       'VolumeDeb_PaymentOrder', 'TransactionsDeb', 'TransactionsDeb_CA',\n",
       "       'TransactionsDebCash_Card', 'TransactionsDebCashless_Card',\n",
       "       'TransactionsDeb_PaymentOrder', 'Sale_MF', 'Sale_CC', 'Sale_CL',\n",
       "       'Revenue_MF', 'Revenue_CC', 'Revenue_CL'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "main.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data normalisation and scaling:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#it's important to handle skewness, outliers and scale our data.\n",
    "#we will treat each numeric variable in main data set:\n",
    "\n",
    "x = main['Age']\n",
    "x1 = main['Tenure']\n",
    "x2 = main['ActBal_CA']\n",
    "x3 = main['VolumeCred']\n",
    "x4 = main['VolumeCred_CA']\n",
    "x5 = main['TransactionsCred']\n",
    "x6 = main['TransactionsCred_CA']\n",
    "x7 = main['VolumeDeb']\n",
    "x8 = main['VolumeDeb_CA']\n",
    "x9 = main['VolumeDebCash_Card']\n",
    "x10 = main['VolumeDebCashless_Card']\n",
    "x11 = main['VolumeDeb_PaymentOrder']\n",
    "x12 = main['TransactionsDeb']\n",
    "x13 = main['TransactionsDeb_CA']\n",
    "x14 = main['TransactionsDebCash_Card']\n",
    "x15 = main['TransactionsDebCashless_Card']\n",
    "x16 = main['TransactionsDeb_PaymentOrder']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x = main['Age']:\n",
    "\n",
    "#add 0.01 in case an observation is equal to zero:\n",
    "x = x + 0.01\n",
    "\n",
    "#Box Cox Transformation helps to normalise the data:\n",
    "xt, maxlog, interval = stats.boxcox(x, alpha = 0.05)\n",
    "\n",
    "#Min-max scaling scales the data between 0 and 1:\n",
    "xt = (xt-xt.mean())/(xt.max()-xt.min())\n",
    "sns.kdeplot(xt, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x1 = main['Tenure']:\n",
    "    \n",
    "x1 = x1 + 0.01\n",
    "xt1, maxlog, interval = stats.boxcox(x1, alpha=0.05)\n",
    "xt1 = (xt1-xt1.mean())/(xt1.max()-xt1.min())\n",
    "sns.kdeplot(xt1, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x2 = main['ActBal_CA']:\n",
    "\n",
    "x2 = x2 + 0.01\n",
    "xt2, maxlog, interval = stats.boxcox(x2, alpha=0.05)\n",
    "xt2 = (xt2-xt2.mean())/(xt2.max()-xt2.min())\n",
    "sns.kdeplot(xt2, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x3 = main['VolumeCred']:\n",
    "    \n",
    "x3 = x3 + 0.01\n",
    "xt3, maxlog, interval = stats.boxcox(x3, alpha=0.05)\n",
    "xt3 = (xt3-xt3.mean())/(xt3.max()-xt3.min())\n",
    "sns.kdeplot(xt3, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x4 = main['VolumeCred_CA']:\n",
    "    \n",
    "x4 = x4 + 0.01\n",
    "xt4, maxlog, interval = stats.boxcox(x4, alpha=0.05)\n",
    "xt4 = (xt4-xt4.mean())/(xt4.max()-xt4.min())\n",
    "sns.kdeplot(xt4, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x5 = main['TransactionsCred']:\n",
    "\n",
    "x5 = x5 + 0.01\n",
    "xt5, maxlog, interval = stats.boxcox(x5, alpha=0.05)\n",
    "xt5 = (xt5-xt5.mean())/(xt5.max()-xt5.min())\n",
    "sns.kdeplot(xt5, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x6 = main['TransactionsCred_CA']:\n",
    "\n",
    "x6 = x6 + 0.01\n",
    "xt6, maxlog, interval = stats.boxcox(x6, alpha=0.05)\n",
    "xt6 = (xt6-xt6.mean())/(xt6.max()-xt6.min())\n",
    "sns.kdeplot(xt6, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x7 = main['VolumeDeb']:\n",
    "\n",
    "x7 = x7 + 0.01\n",
    "xt7, maxlog, interval = stats.boxcox(x7, alpha=0.05)\n",
    "xt7 = (xt7-xt7.mean())/(xt7.max()-xt7.min())\n",
    "sns.kdeplot(xt7, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x8 = main['VolumeDeb_CA']:\n",
    "\n",
    "x8 = x8 + 0.01\n",
    "xt8, maxlog, interval = stats.boxcox(x8, alpha=0.05)\n",
    "xt8 = (xt8-xt8.mean())/(xt8.max()-xt8.min())\n",
    "sns.kdeplot(xt8, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x9 = main['VolumeDebCash_Card']:\n",
    "\n",
    "x9 = x9 + 0.01\n",
    "xt9, maxlog, interval = stats.boxcox(x9, alpha=0.05)\n",
    "xt9 = (xt9-xt9.mean())/(xt9.max()-xt9.min())\n",
    "sns.kdeplot(xt9, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x10 = main['VolumeDebCashless_Card']:\n",
    "\n",
    "x10 = x10 + 0.01\n",
    "xt10, maxlog, interval = stats.boxcox(x10, alpha=0.05)\n",
    "xt10 = (xt10-xt10.mean())/(xt10.max()-xt10.min())\n",
    "sns.kdeplot(xt10, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x11 = main['VolumeDeb_PaymentOrder']:\n",
    "\n",
    "x11 = x11 + 0.01\n",
    "xt11, maxlog, interval = stats.boxcox(x11, alpha=0.05)\n",
    "xt11 = (xt11-xt11.mean())/(xt11.max()-xt11.min())\n",
    "sns.kdeplot(xt11, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x12 = main['TransactionsDeb']:\n",
    "\n",
    "x12 = x12 + 0.01\n",
    "xt12, maxlog, interval = stats.boxcox(x12, alpha=0.05)\n",
    "xt12 = (xt12-xt12.mean())/(xt12.max()-xt12.min())\n",
    "sns.kdeplot(xt12, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x13 = main['TransactionsDeb_CA']:\n",
    "\n",
    "x13 = x13 + 0.01\n",
    "xt13, maxlog, interval = stats.boxcox(x13, alpha=0.05)\n",
    "xt13 = (xt13-xt13.mean())/(xt13.max()-xt13.min())\n",
    "sns.kdeplot(xt13, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x14 = main['TransactionsDebCash_Card']:\n",
    "\n",
    "x14 = x14 + 0.01\n",
    "xt14, maxlog, interval = stats.boxcox(x14, alpha=0.05)\n",
    "xt14 = (xt14-xt14.mean())/(xt14.max()-xt14.min())\n",
    "sns.kdeplot(xt14, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x15 = main['TransactionsDebCashless_Card']:\n",
    "\n",
    "x15 = x15 + 0.01\n",
    "xt15, maxlog, interval = stats.boxcox(x15, alpha=0.05)\n",
    "xt15 = (xt15-xt15.mean())/(xt15.max()-xt15.min())\n",
    "sns.kdeplot(xt15, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzt3Xd4nOWV8P/vmRlJoz7qxZIsd1vutowBU8JSYshSdn+QQELawrJsNj282eQXNpuy7ya7STY9m/USIIUECEnAIQQDBoONq9yLbHVbvYxs9a77/UMzjrBlayRNn/O5Ll2oPHqegywd3TrPec4txhiUUkqFF0ugA1BKKeV9mtyVUioMaXJXSqkwpMldKaXCkCZ3pZQKQ5rclVIqDGlyV0qpMKTJXSmlwpAmd6WUCkO2QF04PT3dFBYWBurySikVkvbv399mjMmY7LiAJffCwkJKSkoCdXmllApJInLak+O0LKOUUmFIk7tSSoUhTe5KKRWGAlZzV0oFn6GhIerq6ujv7w90KBHPbreTl5dHVFTUtD5fk7tS6ry6ujoSExMpLCxERAIdTsQyxuB0Oqmrq2POnDnTOsekZRkReVxEWkTk2GWOeZeIHBKR4yLy5rQiUUoFXH9/P2lpaZrYA0xESEtLm9FfUJ7U3J8ENl4mCAfwE+AOY8xS4J5pR6OUCjhN7MFhpv8OkyZ3Y8xbQPtlDnk/8HtjzBnX8S0zikipEDI8MhroEJSakDdq7guBKBHZBiQC3zfG/MIL51Uq6IyOGl450cSrJ1ooOd3OaWcvcdFW0uKjuWpeGvdeUcDqfIeufqfJ6XRy4403AtDU1ITVaiUjY+xhzL179xIdHe31a372s59ly5Yt3H777Xzzm9/0+vknU1FRwd13382hQ4e8el5vJHcbsBa4EYgFdonIbmNM2YUHishDwEMABQUFXri0Uv7zVlkr//HySY43dJJkt7EwK5G1BSn0DY3Q3jPI5sMNPFtSx4q8ZL59z0oWZiUGOuSQk5aWdj7JfeUrXyEhIYFHHnnkHccYYzDGYLHMvJPbGMNjjz2G0+n0uCtleHgYmy34e1G8EWEd0GaM6QF6ROQtYCVwUXI3xmwCNgEUFxcbL1xbKZ8bHhnl3186yeNvV5OZGMM/Xj+Pa+anY7G8c3XeNzjCzso2nt1fy1//YAdfvG0xH7lau068oaKigrvuuotrrrmGPXv28OKLL/LVr36VAwcO0NfXx/ve9z6+/OUvA5CXl8eDDz7ICy+8wMjICM899xwLFy7k9ddf5zOf+QwigsViYfv27dxzzz309PSwbt06Hn30UdauXcvf/d3f4XQ6ycrK4oknniAvL4/777+frKwsDhw4wLp164iOjqauro6GhgbKysr43ve+x/bt29myZQuzZ8/mhRdewGazsW/fPh555BG6u7vJzMzkySefJCsri3379vHAAw8QHx/Phg0bfPI180ZyfwH4kYjYgGhgPfBdL5xXqYA72zPIx399gLcrnWxcls37ryggyjrxijE22sqNS7JYOzuF/91exVf/eILylm7+7c5lF/0iCAVf/eNxTjR0evWcRblJ/OvtS6f1uSdOnOCJJ57gpz/9KQDf/OY3SU1NZXh4mBtuuIG7776boqIiALKysjh48CA/+MEP+K//+i9++tOf8q1vfYtNmzaxfv16uru7sdvtbN68mfT09PN/Ldx66608+OCDfOADH2DTpk18+tOf5rnnngOgsrKSrVu3YrFYePTRR6murmbr1q0cPnyYa6+9lhdeeIHvfOc73H777bz88svcfPPNfOpTnzp/jaeeeop/+Zd/YdOmTXzkIx9h06ZNbNiwgc985jNe+MpezJNWyN8Au4BFIlInIg+IyMMi8jCAMaYUeBk4AuwFHjPGXLJtUqlQ0dE7xPsf283emnYevn4uH76q8JKJfTxHXDSP3LKIO1bm8us9Z3j0hWOMjuofqjM1b9481q1bd/7t3/zmN6xZs4Y1a9ZQWlrKiRMnzn/sb//2bwFYu3YtNTU1AGzYsIFPf/rT/PCHP6SzsxOr1XrRNfbs2cO9994LwIc+9CG2b99+/mP33HPPO0pBt912GzabjeXLlwNw8803A7B8+XJqamooLS3l+PHj3HTTTaxatYpvfvOb1NbW0tbWRl9f3/kV+wc/+EFvfHkuMunK3RhznwfHfAv4llciUioI9AwM89En91Le3M0jtyxiZb5jSp8vIty7Lh+LwK/3nCHaauErd0xvxRoo011h+0p8fPz518vLy/n+97/P3r17cTgc3H///e/oCY+JiQHAarUyPDwMwKOPPsodd9zBn/70J9atW8e2bdum9IDQ+OuPv4bFYnnHjV6LxcLw8DDGGFasWPGOXxAAbW1tfinV6WwZpS4wPDLKP/xyP4dqz/GJv1ow5cTuJiK8tzif25Zl8+TOGp7bX+flSCNXZ2cniYmJJCUl0djYyJYtWyb9nMrKSlasWMEXv/hFVq9ezalTpy465sorr+TZZ58F4Fe/+hXXXXfdtGMsKiqivr6evXv3AjA4OMjx48dJT0/Hbreza9cuAJ566qlpX+Nygv+Wr1J+9p9bTrGjoo2Hrp3LFXNSZ3QuEeH962dzur2XL/3hKEtyElmam+ylSCPXmjVrKCoqYtmyZcydO9ejm5Lf/va32b59OxaLhRUrVnDLLbdcdMyPfvQjHnjgAb7xjW+cv6E6XTExMTz33HN88pOfpKuri+HhYT73uc+xdOlSnnjiCR588EHi4+MnjMMbxJjA1AKLi4uNbtahgs1LRxv52FMHuLkoi7/bML2ZHhPp6BviS384Smy0lT9/6loS7dMbBuVrpaWlLFmyJNBhKJeJ/j1EZL8xpniyz9WyjFIula3dPPLbwyzITOBDV8726rmTY6P45I0LaDjXx3+8fNKr51ZqIprclWKszv6ZZw5hEeFTNy7A5kFXzFQtzEpk49JsfrX7DHuqnF4/v1LjaXJXCvjJtkqO1HXwwDVzSEuI8dl17inOJzMxhn/+3RH6h0Z8dp2ZCFSpVr3TTP8dNLmriHesvoMfbC3n6nlpXDk3zafXskdZefDaudQ4e/nJGxU+vdZ02O12nE6nJvgAc89zt9vt0z6HdsuoiDY0Msojvz1Mot3GR6/23g3Uy1k+K5mr5qWx6a0q7ltfQE5yrF+u64m8vDzq6upobW0NdCgRz70T03RpclcR7fEd1Zxs6uJzNy8kwe6/H4f71uWzr7qdb28p4zvvXem3604mKipq2jv/qOCiZRkVsWrbe/nua2UUz06huHBm/exTlZFoZ+OybH5/oI5j9R1+vbaKDJrcVUQyxvDlF8ZGIH3k6sKAxHDXqlkk2G1846XSgFxfhTdN7ioivXKimTdOtXLP2nyfdsdcTnyMjbtWzeLtSqe2Riqv0+SuIk7/0Ahff/EE+SmxvHtpdkBjuXFJJo7YKH7wenlA41DhR5O7ijg/21FN3dk+PnRVIdYAz1mPsVl5z4oc3q5wsv/05bYqVmpqNLmriNLY0cePXq/gisJUls0KjgFeNy3JIslu4wdbg6/vXYUuTe4qonzr5VMMj47ygfXBs4evPcrKe5bn8GZZK4drzwU6HBUmNLmriHGsvoM/HKzn1mU5ZCZN/8k/X7i5KJu4aCuP7agOdCgqTHiyzd7jItIiIpfdOk9E1onIiIjc7b3wlPIOYwzf+HMpCXYbd67KDXQ4F4mNtnLDokxeOtJI/bm+QIejwoAnK/cngY2XO0BErMB/AJNvh6JUALxV3sbbFU7+ZvUs4qKD88Hsdy/NxmD4xc6aQIeiwsCkyd0Y8xYw2W38TwC/A1q8EZRS3jQyavj3P5WSlRTDzUuyAh3OJWUkxrCuMJVf7z1Dz8BwoMNRIW7GNXcRmQX8DfDTmYejlPf9/kAdp5q7eF9xgU/mtHvTbctz6Oof1v1W1Yx54zv9e8A/G2MmHU4tIg+JSImIlOjUOeUP/UMjfPuVU8zLiOfKuf6dHzMdC7MSmZ8Rz8931ujYXTUj3kjuxcDTIlID3A38RETumuhAY8wmY0yxMaY4IyPDC5cOPcMjo3T1DwU6jIjxsx3VNHcO8IH1sxEJ7ANLnrqpKIuqth72VOtDTWr6ZnxnyRhzfj6oiDwJvGiMeX6m5w03P99Zw9P7zlDZ0oMIPP9PG1iSkxTosMJae88g/72tkrWzU0Lqa33l3DR+ufs0T+054/PNQ1T48qQV8jfALmCRiNSJyAMi8rCIPOz78MJDeXMXX/3jcfqHRrllaRb2KCuP/PYwwyOjgQ4trP3kjQp6B4e5d11+oEOZkhiblWvnZ/Dno404uwcCHY4KUZOu3I0x93l6MmPMR2YUTZj6zy2nsEdZ+cKti0myRzE/I4HvbS1n0/YqPvau+YEOLyw1dvTxi12nuXZBBnkpcYEOZ8puXJLJy8ebeG5/Hf9w/bxAh6NCUHC3DoSBkpp2Xj3RzO0rckmyRwGwfm4aV8xJ5XuvllPR0h3gCMPTD1+vYNQY/r81swIdyrTkpcSxODuRX+89w+io3lhVU6fJ3YeMMXzjpZOkxEWxcdk7R8t+9OpCLBb42Y6qAEUXvs44e3l2Xy03LM4kIzG4xgxMxV8tzuS0s5e9NXpjVU2dJncfOnDmLPvPnOVvVudhj7K+42OOuGhW56ew5XgzI7oy86rvvVaGRYS7VoXmqt3tijmpxEZZteddTYsmdx96rbQFq0XYMH/ijod1ham09wxSoiszrylv7uIPB+u5ZWkWqfHRgQ5nRmJsVtbPSeWlo430DuoTq2pqNLn70OulLSzKSrzkLJNV+Q6irMLLx5v8HFn4+s6rZdijrNyxMviGg03HdQsz6B0c4eVj+j2ipkaTu4/Un+vjVHMXqwsclzwmNtrKijwHLx9r0qcRveBoXQcvH2vituXZJLpuXoe6RdmJZCXF8Dstzagp0uTuI2+cHJuhtjo/5bLHrStMpbGjn6P1Hf4IK6x9+5VTJMTYuG15TqBD8RqLCNfMz2BnpVNHAasp0eTuI2+cbCEzMYZcx+W7NdYWpGAR9M/uGdp/+ixvlrVy+8rcoB3pO13XLUjHAM8frA90KCqEaHL3gf6hEd6ubGNVvmPSeSYJdhtLc5O17j5DP9xaTpLdxi1FwTvSd7oyk+wszErghUOa3JXnNLn7wO4qJ/1Do6wuuHxJxm1ZbhJVrT36qPk0Hak7x7ayVm5dnnNRy2m4uHpeOmXN3Zxq6gp0KCpEaHL3gTfLWom2WSjycFjVgqxEAA6e0c2Rp+OHr1eQEBOeq3a39XNSsQhsPqyrd+UZTe4+cOD0WeZnJBBt8+zLOzcjHqtFOHDmrI8jCz+ljZ28eqKZdy/NDrta+3iOuGiW5iaz+XCDdlYpj2hy97KB4RFONHYyLyPe48+JsVmZnRqnyX0afvh6ObFR1ovGO4Sjq+elUdvex+E67axSk9Pk7mUnG7sYGjHMy0yY0uctyErkcG2HjgGegoqWLv58tIl3L80iISZ8V+1u6wpTsVmEzYcaAh2KCgGa3L3scN1Y3Xx+xhSTe2YCfUMjnNQbZh770esVxNgs3BpGfe2XEx9jY1W+gxePNOikSDUpTe5edri2g5S4qCnPNVmYNfbL4KCWZjxS3dbD5sMN3FSUdX6UciS4cm4aLV0DHKzV7xN1eZrcvexQ7VnmpCdMeb/O9IQYUuKitGPGQz95owKbxcJ7ImTV7ra6wIHNIrx0VJ+LUJfnyTZ7j4tIi4gcu8THPyAiR1wvO0VkpffDDA2d/UNUtfZM6Waqm4gwPzOB/bpyn1RjRx9/OFjPDYszccSF9uTHqYqLtrE8L1nnEalJebJyfxLYeJmPVwPXG2NWAF8HNnkhrpB0rK4DA8yf4s1UtwWZiZx29urDTJN48u0aRo3hPcvDv0NmIuvnpFJ/rk/nEanLmjS5G2PeAi45cNwYs9MY415u7gbyvBRbyDnkupk6N326yX3s89w3ZdXFuvqHeGrPGdbPSQvpXZZmYm1BKlYtzahJeLvm/gDwZy+fM2Qcrj1HTrKdBPv02vIK0sY2ci5t1I6ZS3lmXy3dA8O8Z0Vk1drHG5tHlMSfjzVqaUZdkteSu4jcwFhy/+fLHPOQiJSISElra6u3Lh00DtWeY+4UWyDHi4u2kZkYo+2QlzA0MsrjO6pZkpPIvBl8ncPBFYWpnHb26veKuiSvJHcRWQE8BtxpjHFe6jhjzCZjTLExpjgjI8Mblw4azu4BmjsHmJM29Zup4+WnxlHa2OmlqMLLy8eaaOjoD6t57dO1dnYKArx6ojnQoaggNePkLiIFwO+BDxpjymYeUmg61Ty2gspPjZ3ReQpS46hu7aF/aMQbYYWVn++sISsphjUeTtsMZ464aOZnJmhyV5fkSSvkb4BdwCIRqRORB0TkYRF52HXIl4E04CcickhESnwYb9Aqa3In97gZnacgNY4RY6ho6fZGWGHjeEMHJafPcvOSbCxTfIYgXK2ZncLR+g6aO/sDHYoKQpPe+TPG3DfJxx8EHvRaRCHqVHMXiXYbjtiZPS1Z4PrlcLKpi2Wzkr0RWlj45a7TRNssXL8ovMp5M7G2IIVn9tWytbSF968vCHQ4KsjoE6pecqqpi7yU2Ck/mXqh7CQ70VYLJ7Xuft653kGeP1jPNfPTI2JAmKfyUmLJTIzhtRPaEqkupsndC4wxnGruIj9lZiUZAItFyE+NpbRJk7vbb0vq6B8eDevNOKZDRFgzO4W3K530Dg4HOhwVZDS5e0H9uT56BkZmXG93y0uJ46T2ugNjvzif2nOaRVmJzJ5hJ1I4WluQwsDwKDvK2wIdigoymty9oMzdKeOFlTuM1d2dPYO0dukYgr3V7dQ4e7lhcWagQwlKi3MSiYu2srW0JdChqCCjyd0LTjWNdbbkpcysDdLNfVNVN0OGZ0pqiY2ysn5OaqBDCUo2i4WV+Q5eK23WGe/qHTS5e8Gppk7SE6KJ99LNvr90zER23b2zf4iXjjZy9bw07FHWQIcTtNYWpODsGTw/20gp0OTuFaeau8jzUkkGICk2ipS4KE5EeMfMHw830D80qiWZSazMd2AR2FqqDzSpv9DkPkPDI6NUtHR7rSTjNislLuIfZHpmXy0FqXHMTdcbqZeTEGNjSU6SPq2q3kGT+wzVOHsYGjHnSynekptsp7K1O2Kn/pU1d3GkroPrF2bM+NmBSLCmIIWy5m5q23sDHYoKEprcZ+gvN1O9m9xnpcTSMzBCc2dkdsw8f7Aei8DV89ICHUpIWDt7bN7Oa1qaUS6a3GeooqUbAXId3t04Ijc59vz5I40xhhcONbB8VnLEbaM3XVlJdvJSYnlNSzPKRZP7DFW2dpORGEOMzbvdHLNcNfzK1shL7vtPn6X+XB8b5qcHOpSQsqYghT3V7XT2DwU6FBUENLnPUGVrN9nJ3t/uzREbRVy0NSJX7s8fqifGZqF4tva2T8XqfAfDo4adFfq0qtLkPiPGGKraesh1eLdTBsbmhuQ6YiNu5T40MsqLRxpZU5BCbLT2tk/FgqxE4qOtbDsVfrucqanT5D4DTZ399A2OkOuDlTuMdcyUR9jKfXt5K+d6h7QkMw1Wi7B0VjJvnGqJ2C4r9Rea3GegsqUHwCcrd4BZjlhauwYiqob64uFGEmJsrMzTWfbTsSrPQXPnAGXNkbUoUBfT5D4DVW1jP0A5yb5J7u5fGpURsnofHB7ltdJm1hQ4sFn1W3M6VuY7ANh2SgeJRTpPttl7XERaROTYJT4uIvIDEakQkSMissb7YQanypZuYqOspMTNbPelS5nlTu6tPT45f7DZVeWks3+YK+Zob/t0pcZHU5Aap3V35dHK/Ulg42U+fiuwwPXyEPDfMw8rNFS29pDrsPvsCcqMpBhsFomYjpmXjzUSG2VhuW4vOCMr85LZV9NO94Bu4BHJJk3uxpi3gPbLHHIn8AszZjfgEJEcbwUYzCpbu31WkoGxca7ZrjEE4W5k1LDleDOr8lOItmlJZiZWakukwjs191lA7bi361zvu4iIPCQiJSJS0toa2n829g4O09jR77ObqW65ybERsXLfV9NOe88g6wq1t32mFmUlYo+ysK0stH/G1Mx4I7lPVJOYsA/LGLPJGFNsjCnOyAjtXeyrXHVwX7VBuuU67Jxx9jI4POrT6wTay8eaiLZaWF3gCHQoIc9mtbAsN5lt2hIZ0byR3OuA/HFv5wENXjhvUHOXSny+cnfEMmIMZ8J42p8xhi3Hm1iel6ybcnjJynwHDef6I6KkpybmjeS+GfiQq2vmSqDDGNPohfMGtcrWHoSxgU2+5K7pV4XxD2lpYxeNHf3nJxuqmVuZ526J1NJMpPKkFfI3wC5gkYjUicgDIvKwiDzsOuQloAqoAP4X+JjPog0iVa3dZCbF+PzmX46r7FPVFr7tkK+fHJtkuDpfSzLekpEYwyxHrCb3CDbppp/GmPsm+bgB/slrEYWIqtYen3bKuMXH2EiOjaI6jHvdXz/ZwryMeB3v62Ur8x28eqKJ3sFh4qK9s7+vCh3aczYNxhiq23p8Mg1yIjnJdirbwrMs4+we4OCZc6zK15KMt63KdzA0YthV6Qx0KCoANLlPQ3PnAH1DI+dLJr6Wk2wP25X7tlOtGNAuGR9YnJ1IjM3Cm9oSGZE0uU9Dtav+ne3jm6luOcmxOHsG6egLvwFir59qwREXxRzdBNvroqwWluYm8cZJbYmMRJrcp8Gd3P1Rcx+7juumaph1zAyNjPLmqVZW5Tmw6CbYPrEyz0Ht2b7z37Mqcmhyn4YaZw9RViEtwT83AHNcvfTh9gNaUnOW7oFhVhdovd1X3FMitTQTeTS5T0NVaw/ZSXa/rTazEmOwyF+eig0Xb5W3YrUIy2YlBTqUsJWVZCcn2a4tkRFIk/s0VLX5Zt/US7FZLWQm2cNu5b69vJUFmQnapudjK/Mc7K5y0j80EuhQlB9pcp+ikVHDGWev3+rtbjlJ4TUd0tk9wPH6Th3v6wcr8x0MDI+yu0pbIiOJJvcpqj/bx/Co8VunjFtOsp0aZw+jo+HR9fB2pRMDrMjTFkhfK8pJItpq0dJMhNHkPkXVTnenjJ+TuyOW/qFRGjv7/XpdX9le1kpCjI252gLpc9E2C0tyE3XrvQijyX2Kql2lEX/W3OEvo4XDoR3SGMNb5a0szU3CYtEWSH9YleegxtnLaWd43bdRl6bJfYqq23qIjbKSHOubfVMvJTs5fNohK1q6ae4c0JKMH7mnRGpLZOTQ5D5F1c5ecpJ9t2/qpaTERREbZQ2Ldsi3yse2f9Obqf6TnWwnKymGN7XuHjE0uU9RVWs3WX4uyQCICNnJ9rAY/bujvJXcZDsZiTGBDiViiAgr8hzsrNSWyEihyX0KBoZHaDjX5/ebqW45yfaQr7kPjYyyp7qdolxdtfvbqjwHfUMjlNScDXQoyg80uU9BbXsvo8Z/A8MulJMcS/3ZvpBeeR2t76B3cIRlufpUqr8V5SZhswhvlmnXTCTQ5D4F5zfF9vG+qZeSk2zHAKedobufqnu2+BJN7n5nj7KyJCeJN7TuHhE8Su4islFETolIhYh8YYKPF4jIGyJyUESOiMht3g818KraAtPj7ub+pRLKpZmdFW3MTosjye7fbiM1ZkVeMhUt3dSf6wt0KMrHPNlD1Qr8GLgVKALuE5GiCw57FHjWGLMauBf4ibcDDQbVrT04YqMCNgvFXQ4K1ZuqA8MjlJw+S1GOrtoDZZV7SqSu3sOeJyv3K4AKY0yVMWYQeBq484JjDOD+iU0GGrwXYvCo9PPAsAvFRltJjY8O2XbIg2fOMTA8ylK9mRowsxyxpCdEa909AniS3GcBtePernO9b7yvAPeLSB3wEvCJiU4kIg+JSImIlLS2ht7Kobq1J2AlGbecZDtVIbqf6s5KJxaBJTmJgQ4lYokIK/Mc7KhoY3B4NNDhKB/yJLlP9LTOhdOr7gOeNMbkAbcBvxSRi85tjNlkjCk2xhRnZGRMPdoA6ugbwtkz6PdpkBfKTrKH7Mp9V2Ubc9LjdcRvgK3Mc9AzMMKBM9oSGc48Se51QP64t/O4uOzyAPAsgDFmF2AH0r0RYLCoDvDNVLdcRywdfUO09wwGNI6p6hsc4eCZc1qSCQJLZyVhtYhOiQxzniT3fcACEZkjItGM3TDdfMExZ4AbAURkCWPJPay+c9wdKjkBaoN0c9f8q0OsNHPgzFmGR42WZIJAXLSNRVkJWncPc5Mmd2PMMPBxYAtQylhXzHER+ZqI3OE67HPA34vIYeA3wEdMmG23Xt3Wg0XGtrwLpFxXWagyxEoze6rbsQgszNLkHgxW5jkobeyiOUxGSKuLeVT8NMa8xNiN0vHv+/K4108AG7wbWnCpaushK8mOzRrY574yEmOwWSTk6u57q50Upmm9PViszHfwm321vFnWynuL8yf/BBVy9AlVD1W1dgds7MB4VouQlWQPqbLMwPBYvX1xtq7ag0VBahwpcVHa7x7GNLl7YHTUUNPWG/CbqW5jA8RCZ+V+tK6DgeFRFuvDS0HDPSVye3krwyPaEhmONLl7oKmzn76hkfMbZgRatms/1ZEQ2U91T3U7AIt05R5UVuc76Owf5sCZc4EORfmAJncPuNsgcx3BsXLPTY5laMRQfzY05oPsqXKSnxKr82SCzPK8ZKwWYevJ5kCHonxAk7sHzrdBBsnKPcfhnjET/HX34ZFRSk6fZVG2lmSCTVy0jSU5iWwt1ZbIcKTJ3QNVbT3YoyykxAXHytP9SyYU6u4nGjvpHRyhSPvbg9KaghQqWro5E8JjpNXENLl7oKq1h5zkWL/vm3opSXYb8THWkFi57z1fb9eVezBaU5ACoKWZMKTJ3QNVbcHRBukmIuQkx56/FxDM9lS3k51kJzU+OtChqAlkJdmZ5Yjl9ZNamgk3mtwnMTA8Qv3ZvvN17mCRk2SnsiW4k/voqGFvdbv2twe51QUOdlU56R4YDnQoyos0uU/ijHNs39RguZnqluOIpamzn97B4P2BLG/ppqNvSPvbg9yaghSGRwzby/SBpnCiyX0Sgd5a71Jyzg8QC97V+55q136punIPaguzEomPsbJVSzNhRZP7JNwdKcGa3IO5Y2ZPdTtp8dFkBHi7BGjiAAAalElEQVTYmro8q2VsA4/XT7YwGiIPxqnJaXKfRHVbNylxgds39VKyg3zlboxhb9VYvT1YuozUpa0pSKG9Z5DDdfq0arjQ5D6JqtaegO6beikxNisZCdHnH7AKNjXOXlq7B7TeHiJW5jmwCPpAUxjR5D6JqraeoLuZ6padHHv+nkCw2Xu+3q7JPRQk2G0syk7Ufvcwosn9Mjp6x7azC7Z6u5t7OmQw7ouyp7qdJLstaObxqMmtzk+htLGLhnOhMbNIXZ4m98twPwEajGUZGGvP7B4YprV7INChXGRPVTuLs5O03h5C3E+r6gNN4cGj5C4iG0XklIhUiMgXLnHMe0XkhIgcF5FfezfMwDg/DTJIyzLB2jFTd7aX+nN9ul9qiMl12MlOimFrqZZmwsGkyV1ErMCPgVuBIuA+ESm64JgFwBeBDcaYpcCnfRCr31W1ju2bmhmkrXx5KWO/dMpbguumqnuejN5MDS0iwuqCFN6u0KdVw4EnK/crgApjTJUxZhB4GrjzgmP+HvixMeYsgDEmLP6uqw6SfVMvJTU+mrhoK+XNXYEO5R32VrcTH2OlICUu0KGoKVpXmMrgyKhuvxcGPMlas4DacW/Xud433kJgoYi8LSK7RWTjRCcSkYdEpERESlpbg/+bpzJI9k29FBFhliOWsiBL7rurnCzKSsRi0Xp7qFmUlUhSrI2XjzcFOhQ1Q54k94l+Qi9sz7ABC4B3AfcBj4mI46JPMmaTMabYGFOckZEx1Vj9anTUUOPsCdpOGbe8lDhONQVPcm/p7KfG2csSLcmEJItFWFuQwusnmxkYHgl0OGoGPEnudUD+uLfzgIYJjnnBGDNkjKkGTjGW7ENW3dk++odGmRXkpYW8lFjO9g7RFiQdM+79Uhdrf3vIKi5MpWdghJ2VzkCHombAk+S+D1ggInNEJBq4F9h8wTHPAzcAiEg6Y2WaKm8G6m/uUof7pmWwcscXLKWZvdXtxEZZmZMeH+hQ1DQty00mNsrKK1qaCWmTJndjzDDwcWALUAo8a4w5LiJfE5E7XIdtAZwicgJ4A/g/xpiQ/rXv7kAJ/uQ+9pdFWZCUZnZXOVmYlYBV6+0hK9pmYVW+g1eONzOig8RClkfTsIwxLwEvXfC+L4973QCfdb2EhfLmLlc3SnANDLtQSlwUCTE2yoKgHbK9Z5Dylm7eV5w/+cEqqK0rTGFXlZOSmnbWz00LdDhqGoKzxy8IlLV0kecI7lU7uDpmUoKjY8bd3643U0Pf6oIUoq0W/nxMSzOhSpP7BEZHDZUtPcwK8pKMW56rHTLQM2b2VDuJtlqYm6H19lBnj7KyKt/Bn442amkmRGlyn0Dd2T76hkbO17ODXX5qHJ19w7R0BbZjZm91OwuyEogK0oe+1NSsn5tKa9cAJTXtgQ5FTYP+FE6gvCU0OmXcgqFjpqNviBMNndoCGUbWuEozLx1tDHQoaho0uU+grHns5uSsEKi5w7iOmebA3VTdf7odAzosLIzYo6ysKnDw0tEmLc2EIE3uEyhvGeuUiY8J7k4Zt+TYKJLstoC2Q+6pasdmERZkanIPJ1fOSaW1W0szoUiT+wTKmrtCZtXulp8ax4nGzoBdf091O/MyEoi26bdUOFldkEK0zcKLR7Q0E2r0J/EC7k6ZUKm3u81Jj+dkUydDI6N+v3bPwDBH6zq0JBOG7FFW1hQ4ePFIQ0C+t9T0aXK/QP25sU6ZUGmDdCtMi2doxFARgIeZDpw5y4gx2t8epjbMT+ds7xA7ytsCHYqaAk3uF3B3nOSHSBukW6FrlsvxBv+XZvZUtWMRtN4eplblOUiMsfGHg/WBDkVNgSb3C5xsCq02SLecJDsxNgvH6jv8fu1dlU7mpscTG231+7WV79msFq6Yk8qrJ5rp0R2aQoYm9wucaOwkKykm6GfKXMhiEWanxXG8wb/Jvat/iEO151g2K9mv11X+dc38dPqGRnjlhI4jCBWa3C9woqGTgtTQKsm4FabFc7yhk1E/9iTvrW5nxBhN7mFuYXYi6QnRPH/wwq0cVLDS5D5Oz8AwNW09zE4LzdkohWnx9A6OcLq912/X3FHRRrTVovX2MGcRYcP8dLaXt9LS1R/ocJQHNLmPc7KpCwPMTgvRlbvrpqo/6+5vV7SxKDtR+9sjwHULMhg18IcDemM1FOhP5DilroeACkN05Z6fEovNIn7rmGnp6qesuVtLMhEi1xHLwqwEni2pDfgEUjU5j5K7iGwUkVMiUiEiX7jMcXeLiBGRYu+F6D8nGjtJiLGRFh8d6FCmxWa1kJ/qv5uqOyvGNttalqv97ZHi+oWZVLb2cLD2XKBDUZOYNLmLiBX4MXArUATcJyJFExyXCHwS2OPtIP3lREMns9PiEAndLeJmp8ZxrL7DLyurtyvaSIyxhexfOmrqrpybSozNwm9LagMdipqEJyv3K4AKY0yVMWYQeBq4c4Ljvg78JxCSd1tGRg0nm0K3U8ZtTkY8Z3uHqDvb59PrGGPYUdFGUW4SFt0vNWLERdtYPyeVzYcb6BscCXQ46jI8Se6zgPG/putc7ztPRFYD+caYF70Ym19Vt/XQPzQasp0ybu6ulf2nz/r0OpWtPTR29LM0V+vtkeb6RZn0DIzonPcg50lyn2hZdv5vfhGxAN8FPjfpiUQeEpESESlpbW31PEo/+MvN1NBeuRekxhEbZaXktG9HtL5xsgWA1QUOn15HBZ8l2YnkJtv59Z4zgQ5FXYYnyb0OGL+dfR4w/kmGRGAZsE1EaoArgc0T3VQ1xmwyxhQbY4ozMjKmH7UPnGjsxGaRkBv1eyGrRZifmUBJjW9X7q+fbCE/NZb0hBifXkcFHxHhxiVZ7D9zlhMBmGWkPONJct8HLBCROSISDdwLbHZ/0BjTYYxJN8YUGmMKgd3AHcaYEp9E7CPHGzqZlRKLLQz2/1yYlcippi46+4d8cv6u/iH21bSzOj/FJ+dXwe+6BRlEWy38as/pQIeiLmHSTGaMGQY+DmwBSoFnjTHHReRrInKHrwP0B2MMh2vPMTc9tOvtbouyEzHAwTO+aVfbUd7G8KhhVb6WZCJVgt3GVfPS+MPBerp8tIhQM+PRMtUY85IxZqExZp4x5v+63vdlY8zmCY59V6it2mucvXT0DTE/TB6hn5+RgEVgv4+2RnvjVAvxMVYWZoXH10tNz81FWfQNjugo4CAV+jUILzh4Zqw+vSAzIcCReEdstJXZafHs80HdfXTU8MbJVlbMcmDVFsiINi8jgbnp8fx8Z40+sRqENLkDh2rPERtlCfmbqeMtyEzgUO05r2+NdqKxk9buAS3JKAA2LsumsrWHN8uCq/tNaXIHxraJm5uREFYP4yzOTqRvaOR8i6e3vHqiGQFWanJXwFVz00iJi+Kx7dWBDkVdIOKTe//QCCcbu5gfJiUZN3c9fG+1d+vufzrayOKcRJJjo7x6XhWabFYLtyzNZkdFGyebtC0ymER8cj9W38HwqAm75J6WEMMsRyzbTnnvz+Wy5i4qWrq5cm6a186pQt9Ni7OIsVn4ma7eg0rEJ3d3u+D8jPBK7gCr8h3sqXbS7aV9L1883IBF4IrCVK+cT4WHBLuN6xdm8Pyhelo6Q3K0VFjS5F57lszEGBxxoTnm93LWFDgYGjHsKG+b8bmMMbx4pJElOUlh+bVSM3PrshxGRg2P7dDVe7DQ5H7mHPPCrCTjtjA7kfho6/k5MDNxsqmLqrYertKSjJpAdrKdq+al88vdp2nvGQx0OIoIT+5NHf00dvSHZUkGwGaxsDwvmddPtsx40+wXj4yVZNZpSUZdwl2rcukfHOFxXb0HhYhO7nuqx3YSWpQdvk9ars5PobV7YEZb742OGjYfbmBpbjJJ2iWjLiEvJY4r5qTy5M4aOvp0JEGgRXRyf7uijfgYK3NCfIb75azKdyCMTXGcrrfKW6lt7+Ndi4JrkqcKPnetnkX3wDBPvK2r90CL6OS+s8JJUU547ySUFBvF/MwEXjnRNO1z/HL3aRyxUdoloyZVmBbPusIU/nd7ldbeAyxik/sZZy915/oiYiehq+alcbyhc1obZ9e29/J6aQs3LM4Mi3HIyvfeW5xP3+AIP3mjItChRLSI/WndWTnWHrgsApL7tQsyiLFZ+NXuqe+c8+u9ZxCBGxdn+iAyFY7yUuK4dkEGP99VQ/053+7lqy4tYpP725VOUuKiyHXYAx2KzyXE2LhybhrPH5ra7O3+oRGe3nuGtbNTSNMdl9QU3LM2D4DvvloW4EgiV0Qmd2MMOyvaKMpNRiR86+3jTWf29jP7ajnbO8QtRdk+jEyFo7SEGN69NJvf7a/jWP3Uy4Fq5iIyuZc1d+PsGWRpblKgQ/Eb9+ztX+0+7dHs7Y7eIf7r1TKW5iZF1NdJec9dq2aRGGvjXzcf13nvAeBRcheRjSJySkQqROQLE3z8syJyQkSOiMhWEZnt/VC9J5Lq7ePdtCSLsuZu3jg1eVvk97eW09k3xAevnB0xf90o74qPsXFvcQH7T5/l+UO6W5O/TZrcRcQK/Bi4FSgC7hORogsOOwgUG2NWAM8B/+ntQL1pa2kLucl2MhIjq458zYJ0ZqXE8v///thlN8+uau3mF7tquGFxJrPD+BkA5XvXL8pgXkY8//7SSa8NsFOe8WTlfgVQYYypMsYMAk8Dd44/wBjzhjGm1/XmbiDPu2F6z7neQXZXOSmOwJ7tKKuFh6+bS0tXP//+p9IJj+kZGOZzzx4mymo5f1NMqemyiPCRqwtp7Rrg21tOBTqciOJJcp8F1I57u871vkt5APjzTILypa2lLQyPGq6YE3nJHWB+ZiLvWZ7D0/tqeeX4Ox9s6h8a4cGfl3C47hz/cP1cnf6ovGJ+ZiK3FGXx8501lPho03Z1MU+S+0QF1wnvjojI/UAx8K1LfPwhESkRkZLW1sDsufjy8SbS4qOZmx655Ya71+ZTkBrHQ7/czyO/PUx5cxd/PNzAhx/fy+4qJ//4rvmsn6PTH5X33LuugLSEaD7/3BH6h0YCHU5E8CS51wH5497OAxouPEhEbgK+BNxhjBmY6ETGmE3GmGJjTHFGhv/nlPQMDPNWWSvrClMj+iZhtM3CV+9Yyu0rcvjDwXpu/u5bfOI3Bzla38FD183lmvnpgQ5RhZnYaCt/f+1cqtp6+P7W8kCHExFsHhyzD1ggInOAeuBe4P3jDxCR1cD/ABuNMTMfHu4jb5a1MjA8yroILcmMZ4+y8v71s7l+YSbHGzuYl5FAYVo81jCes6MCa0WegxsWZfDTbZVctyCDq+bpX4e+NOnK3RgzDHwc2AKUAs8aY46LyNdE5A7XYd8CEoDfisghEdnss4hn4OVjTSTF2licFb4jfqdqVkostxRlMy8jQRO78rkPXVVITrKdTz19UAeL+ZhHfe7GmJeMMQuNMfOMMf/X9b4vG2M2u16/yRiTZYxZ5Xq54/Jn9L+egWFeK21mbUFqWE+BVCqY2aOsfOLGBbT3DPLIbw/rw00+FDFPqG4+3EDv4IjOJFcqwArT4vnA+gJeP9nCT7ZVBjqcsBURyd0Yw692n6YgNY4FYbpfqlKh5N1Ls9kwL41vbTl1UUuu8o6ISO5H6jo43tDJTUsyI7pLRqlgISI8dN085mXE8+lnDnGyafrbQKqJRURyf2rPaexRFjZoi59SQSPaZuGzNy8ixmbhw4/vpba9d/JPUh4L++Te0TvE5kMNbJiXTly0J52fSil/SY2P5p83LqZ7YJj7f7aH1q4JH5FR0xD2yf1Xe07TPzzKTUVZgQ5FKTWB2WnxfP7di2nq6OeDP9uDs1sTvDeEdXI/2zPIf2+rZO3sFAp1uqFSQWthViKfvXkhVa09vPd/dtHU0R/okEJeWCf3n75ZSc/AMO8rzp/8YKVUQK3Ic/DPty6m4Vw/d//3TqrbegIdUkgL2+Te2NHHkztruGZBOvmpcYEORynlgaKcJL70niV09A9x14/fZkd5W6BDCllhm9y/80oZI6NGZ5IrFWLmZSTw9TuXkRRr48OP7+Wx7VX6JOs0hGVyf+V4E8/tr+O25TlkJNoDHY5Saoqykux89fZlrJnt4N/+VMpHn9innTRTFHbJvbmzn8//7ghz0uN11a5UCIuNtvKZmxby0asL2VnpZOP33uKFQ/W6ivdQWCX3kVHD5549TO/gCB+/YT42a1j97ykVcUSEW5Zm8293LcMRF8Wnnj7E/T/bQ0VLd6BDC3phk/1GRw2ff+4IOyra+NBVs8l1xAY6JKWUl+SnxvG1O5bx0Q2FHDpzjlu++yaff+4w9ef6Ah1a0AqLRzZHRw1f/P1RfnegjnvW5nHjYn1gSalwY7EItxRlc+WcNF44VM/vD4y93LEylwevnUtRblKgQwwqEqj6VXFxsSkpKZnxeTp6h/jC74/w52NN/O2aWdyzVnvalYoEbd0D/OlII9vKWugfGmVtQQrvW5fPbStySIgJi3XrhERkvzGmeNLjQjm576xs47PPHKa1e4B71+XznuU5OvVRqQjTPTDMGydb2FbWQsO5fmJsFq5bmMHGpdlcsyCdrKTw6pjzanIXkY3A9wEr8Jgx5psXfDwG+AWwFnAC7zPG1FzunDNJ7vtq2vn+a+XsqGgjJ9nOP90wn3kZOqddqUhmjKG8pZtdlU721bTjdG3jNyc9nivnpnHl3FSumJNKdpI9pBeBXkvuImIFyoCbgTrGNsy+zxhzYtwxHwNWGGMeFpF7gb8xxrzvcuedbnJ/tqSWzz93hOTYKP56RQ43LcnCHmWd8nmUUuFr1BhOO3s53tBBaWMnJ5u66B0cASA5NopF2YksykpkUXYiczPimeWIJTvZTozNt7nkXO8gh+s6yEqKYXH29O4ReJrcPSlMXQFUGGOqXCd+GrgTODHumDuBr7hefw74kYiI8UHN591Lsznt7GVdYYrP/yGUUqHJIsKc9HjmpMfz1ytyGR01VDt7qGjppra9l7qzffzuQN35hO+WnhBNriOWjIQYkuOiSImLxhEbhSMuithoG/YoC3abldhoKzE2Cxf+ATA0YujqH6Z7YIju/mE6+4dp7RrgTHsvFS3dnHHNrP/ohkL+9falPv0aeJLcZwG1496uA9Zf6hhjzLCIdABpgNcHQyTHRvH+9QW0d+vO6Uopz63Mc7Ayz3H+bWMMrV0DNHb209o1QGvXAG3dY/+tcfbQVT9MV/8wfUMjlznr5OKirWQl2clLieVdizJYMSuZdy/Lnun/zqQ8Se4TFacuXJF7cgwi8hDwkOvNbhE55cH1pyodH/xS8QGN07s0Tu/SOL2o1LtxzvbkIE+Sex0wvr8wD2i4xDF1ImIDkoH2C09kjNkEbPIksOkSkRJP6lGBpnF6l8bpXRqndwUiTk+eUN0HLBCROSISDdwLbL7gmM3Ah12v3w287ot6u1JKKc9MunJ31dA/DmxhrBXycWPMcRH5GlBijNkM/Az4pYhUMLZiv9eXQSullLo8jx7jMsa8BLx0wfu+PO71fuAe74Y2bT4t+3iRxuldGqd3aZze5fc4A/aEqlJKKd8Jm6mQSiml/iLkk7uIpIrIqyJS7vpvyiWOKxCRV0SkVEROiEhhMMbpOjZJROpF5Ef+jNF17UnjFJFVIrJLRI6LyBERuezTyF6Ob6OInBKRChH5wgQfjxGRZ1wf3+Pvf+dxcUwW52dd34dHRGSriHjU3ubvOMcdd7eIGBEJSGeKJ3GKyHtdX9PjIvJrf8foimGyf/cCEXlDRA66/u1v81kwxpiQfgH+E/iC6/UvAP9xieO2ATe7Xk8A4oIxTtfHvw/8GvhRMH49gYXAAtfruUAj4PBDbFagEpgLRAOHgaILjvkY8FPX6/cCzwTga+hJnDe4vweBfwzWOF3HJQJvAbuB4mCME1gAHARSXG9nBmmcm4B/dL1eBNT4Kp6QX7kzNvrg567Xfw7cdeEBIlIE2IwxrwIYY7qNMb3+CxHwIE4AEVkLZAGv+CmuC00apzGmzBhT7nq9AWgBMvwQ2/lRGMaYQcA9CmO88fE/B9wo/p8SNWmcxpg3xn0P7mbs+RF/8+TrCfB1xn7p9/szuHE8ifPvgR8bY84CGGNa/BwjeBanAdxDZZK5+JkhrwmH5J5ljGkEcP03c4JjFgLnROT3rj+HvuUaiOZPk8YpIhbgO8D/8XNs43ny9TxPRK5gbJVS6YfYJhqFMetSxxhjhgH3KAx/8iTO8R4A/uzTiCY2aZwishrIN8a86M/ALuDJ13MhsFBE3haR3a5Jtv7mSZxfAe4XkTrGOhA/4atgQmKivYi8Bkw0jOFLHp7CBlwLrAbOAM8AH2GsP99rvBDnx4CXjDG1vlxseiFO93lygF8CHzbGjHojtskuOcH7pjUKw8c8jkFE7geKget9GtHELhuna7HxXcZ+VgLJk6+njbHSzLsY+ytou4gsM8ac83Fs43kS533Ak8aY74jIVYw9H7TMFz8/IZHcjTE3XepjItIsIjnGmEZXspnoz7E64KD5y2TL54Er8XJy90KcVwHXukYoJwDRItJtjLnkja4AxYmIJAF/Ah41xuz2ZnyX4bVRGD7mSZyIyE2M/UK93hgz4KfYxpsszkRgGbDNtdjIBjaLyB3GmJlvo+Y5T//ddxtjhoBq19yqBYw9Ye8vnsT5ALARwBizS0TsjM2d8XoZKRzKMuNHH3wYeGGCY/YBKSLirgv/Fe8cWewPk8ZpjPmAMabAGFMIPAL8wtuJ3QOTxukaQ/EHxuL7rR9jC5VRGJPG6Sp3/A9wR4DqwzBJnMaYDmNMujGm0PU9uZuxeP2Z2CeN0+V5xm5SIyLpjJVpqvwapWdxngFuBBCRJYAdaPVJNP6+o+ztF8bqqVuBctd/U13vL2Zs1yj3cTcDR4CjwJNAdDDGOe74jxCYbplJ4wTuB4aAQ+NeVvkpvtsY2zymEviS631fYyzpwNgPy2+BCmAvMDdA35eTxfka0Dzu67c5GOO84NhtBKBbxsOvpwD/xdii7Shwb5DGWQS8zVgnzSHgFl/Fok+oKqVUGAqHsoxSSqkLaHJXSqkwpMldKaXCkCZ3pZQKQ5rclVIqDGlyV0qpMKTJXSmlwpAmd6WUCkP/D1UHZgB79tMmAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#x16 = main['TransactionsDeb_PaymentOrder']:\n",
    "\n",
    "x16 = x16 + 0.01\n",
    "xt16, maxlog, interval = stats.boxcox(x16, alpha=0.05)\n",
    "xt16 = (xt16-xt16.mean())/(xt16.max()-xt16.min())\n",
    "sns.kdeplot(xt16, shade=True, label=\"Transformed\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#join transformed variables into a new DataFrame:\n",
    "\n",
    "Tmain = pd.DataFrame()\n",
    "Tmain['M'] = main['M']\n",
    "Tmain['F'] = main ['F']\n",
    "Tmain['Age'] = xt\n",
    "Tmain['Tenure'] = xt1\n",
    "Tmain['Count_CA'] = main['Count_CA']\n",
    "Tmain['ActBal_CA'] = xt2\n",
    "Tmain['VolumeCred'] = xt3\n",
    "Tmain['VolumeCred_CA'] = xt3\n",
    "Tmain['TransactionsCred'] = xt5\n",
    "Tmain['TransactionsCred_CA'] = xt6\n",
    "Tmain['VolumeDeb'] = xt7\n",
    "Tmain['VolumeDeb_CA'] = xt8\n",
    "Tmain['VolumeDebCash_Card'] = xt9\n",
    "Tmain['VolumeDebCashless_Card'] = xt10\n",
    "Tmain['VolumeDeb_PaymentOrder'] = xt11\n",
    "Tmain['TransactionsDeb'] = xt12\n",
    "Tmain['TransactionsDeb_CA'] = xt13\n",
    "Tmain['TransactionsDebCash_Card'] = xt14\n",
    "Tmain['TransactionsDebCashless_Card'] = xt15\n",
    "Tmain['TransactionsDeb_PaymentOrder'] = xt16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(909, 20)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tmain.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>M</th>\n",
       "      <th>F</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>ActBal_CA</th>\n",
       "      <th>VolumeCred</th>\n",
       "      <th>VolumeCred_CA</th>\n",
       "      <th>TransactionsCred</th>\n",
       "      <th>TransactionsCred_CA</th>\n",
       "      <th>VolumeDeb</th>\n",
       "      <th>VolumeDeb_CA</th>\n",
       "      <th>VolumeDebCash_Card</th>\n",
       "      <th>VolumeDebCashless_Card</th>\n",
       "      <th>VolumeDeb_PaymentOrder</th>\n",
       "      <th>TransactionsDeb</th>\n",
       "      <th>TransactionsDeb_CA</th>\n",
       "      <th>TransactionsDebCash_Card</th>\n",
       "      <th>TransactionsDebCashless_Card</th>\n",
       "      <th>TransactionsDeb_PaymentOrder</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.110874</td>\n",
       "      <td>-0.405181</td>\n",
       "      <td>1</td>\n",
       "      <td>0.084767</td>\n",
       "      <td>0.091289</td>\n",
       "      <td>0.091289</td>\n",
       "      <td>0.332316</td>\n",
       "      <td>0.387214</td>\n",
       "      <td>0.113448</td>\n",
       "      <td>0.085318</td>\n",
       "      <td>0.219449</td>\n",
       "      <td>0.371971</td>\n",
       "      <td>0.083545</td>\n",
       "      <td>0.332214</td>\n",
       "      <td>0.243480</td>\n",
       "      <td>0.263769</td>\n",
       "      <td>0.398132</td>\n",
       "      <td>0.261906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001332</td>\n",
       "      <td>0.190740</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.102872</td>\n",
       "      <td>0.019677</td>\n",
       "      <td>0.019677</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>-0.004898</td>\n",
       "      <td>-0.026883</td>\n",
       "      <td>-0.020118</td>\n",
       "      <td>0.236189</td>\n",
       "      <td>0.202676</td>\n",
       "      <td>-0.039389</td>\n",
       "      <td>-0.089733</td>\n",
       "      <td>-0.075495</td>\n",
       "      <td>0.203624</td>\n",
       "      <td>0.182351</td>\n",
       "      <td>-0.087307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.337691</td>\n",
       "      <td>-0.307258</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.262042</td>\n",
       "      <td>-0.005572</td>\n",
       "      <td>-0.005572</td>\n",
       "      <td>-0.038655</td>\n",
       "      <td>-0.059095</td>\n",
       "      <td>-0.017724</td>\n",
       "      <td>-0.012158</td>\n",
       "      <td>0.248633</td>\n",
       "      <td>-0.395786</td>\n",
       "      <td>-0.305237</td>\n",
       "      <td>-0.048795</td>\n",
       "      <td>-0.075495</td>\n",
       "      <td>0.107515</td>\n",
       "      <td>-0.398311</td>\n",
       "      <td>-0.406668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.264561</td>\n",
       "      <td>-0.240939</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.412474</td>\n",
       "      <td>0.013159</td>\n",
       "      <td>0.013159</td>\n",
       "      <td>0.332316</td>\n",
       "      <td>0.364392</td>\n",
       "      <td>0.014674</td>\n",
       "      <td>-0.007779</td>\n",
       "      <td>0.220594</td>\n",
       "      <td>0.066314</td>\n",
       "      <td>-0.305237</td>\n",
       "      <td>0.284841</td>\n",
       "      <td>0.187150</td>\n",
       "      <td>0.460722</td>\n",
       "      <td>0.102092</td>\n",
       "      <td>-0.406668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.286112</td>\n",
       "      <td>0.136051</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.024045</td>\n",
       "      <td>0.061963</td>\n",
       "      <td>0.061963</td>\n",
       "      <td>0.060901</td>\n",
       "      <td>-0.004898</td>\n",
       "      <td>0.070947</td>\n",
       "      <td>0.071739</td>\n",
       "      <td>0.244383</td>\n",
       "      <td>0.329468</td>\n",
       "      <td>0.100757</td>\n",
       "      <td>0.278513</td>\n",
       "      <td>0.315938</td>\n",
       "      <td>0.373675</td>\n",
       "      <td>0.441406</td>\n",
       "      <td>0.284210</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        M  F       Age    Tenure  Count_CA  ActBal_CA  VolumeCred  \\\n",
       "Client                                                              \n",
       "1       0  1  0.110874 -0.405181         1   0.084767    0.091289   \n",
       "2       1  0  0.001332  0.190740         1  -0.102872    0.019677   \n",
       "6       0  1 -0.337691 -0.307258         1  -0.262042   -0.005572   \n",
       "8       0  1  0.264561 -0.240939         1  -0.412474    0.013159   \n",
       "13      0  1  0.286112  0.136051         1  -0.024045    0.061963   \n",
       "\n",
       "        VolumeCred_CA  TransactionsCred  TransactionsCred_CA  VolumeDeb  \\\n",
       "Client                                                                    \n",
       "1            0.091289          0.332316             0.387214   0.113448   \n",
       "2            0.019677          0.000487            -0.004898  -0.026883   \n",
       "6           -0.005572         -0.038655            -0.059095  -0.017724   \n",
       "8            0.013159          0.332316             0.364392   0.014674   \n",
       "13           0.061963          0.060901            -0.004898   0.070947   \n",
       "\n",
       "        VolumeDeb_CA  VolumeDebCash_Card  VolumeDebCashless_Card  \\\n",
       "Client                                                             \n",
       "1           0.085318            0.219449                0.371971   \n",
       "2          -0.020118            0.236189                0.202676   \n",
       "6          -0.012158            0.248633               -0.395786   \n",
       "8          -0.007779            0.220594                0.066314   \n",
       "13          0.071739            0.244383                0.329468   \n",
       "\n",
       "        VolumeDeb_PaymentOrder  TransactionsDeb  TransactionsDeb_CA  \\\n",
       "Client                                                                \n",
       "1                     0.083545         0.332214            0.243480   \n",
       "2                    -0.039389        -0.089733           -0.075495   \n",
       "6                    -0.305237        -0.048795           -0.075495   \n",
       "8                    -0.305237         0.284841            0.187150   \n",
       "13                    0.100757         0.278513            0.315938   \n",
       "\n",
       "        TransactionsDebCash_Card  TransactionsDebCashless_Card  \\\n",
       "Client                                                           \n",
       "1                       0.263769                      0.398132   \n",
       "2                       0.203624                      0.182351   \n",
       "6                       0.107515                     -0.398311   \n",
       "8                       0.460722                      0.102092   \n",
       "13                      0.373675                      0.441406   \n",
       "\n",
       "        TransactionsDeb_PaymentOrder  \n",
       "Client                                \n",
       "1                           0.261906  \n",
       "2                          -0.087307  \n",
       "6                          -0.406668  \n",
       "8                          -0.406668  \n",
       "13                          0.284210  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Tmain.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check correlation between features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_corr(df,size=10):\n",
    "    sns.set(style=\"white\")\n",
    "    # Compute the correlation matrix\n",
    "    corr = df.corr()\n",
    "\n",
    "    # Generate a mask for the upper triangle\n",
    "    mask = np.zeros_like(corr, dtype=np.bool)\n",
    "    mask[np.triu_indices_from(mask)] = True\n",
    "\n",
    "    # Set up the matplotlib figure\n",
    "    f, ax = plt.subplots(figsize=(size, size-2))\n",
    "\n",
    "    # Generate a custom diverging colormap\n",
    "    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n",
    "\n",
    "    # Draw the heatmap with the mask and correct aspect ratio\n",
    "    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n",
    "                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_corr(Tmain,size=12)\n",
    "#We noticed that some features are highly correlated, it is better do delete them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(909, 8)\n",
      "(909, 6)\n"
     ]
    }
   ],
   "source": [
    "#drop features that are highly correlated and assign the rest independent variables to X:\n",
    "X = Tmain.drop([ \"VolumeCred_CA\",\"VolumeDeb\", \n",
    "               \"VolumeDeb_CA\",\"TransactionsDeb\",\"TransactionsCred_CA\",\"TransactionsDebCash_Card\",\n",
    "               \"TransactionsDeb_CA\",\"TransactionsDebCashless_Card\",\n",
    "                'VolumeDeb_PaymentOrder', 'TransactionsCred', 'VolumeDebCash_Card', \"TransactionsDeb_PaymentOrder\",], axis=1)\n",
    "\n",
    "#assign target variables to y:\n",
    "y = main[['Sale_MF', 'Sale_CC', 'Sale_CL','Revenue_MF', 'Revenue_CC', 'Revenue_CL']]\n",
    "\n",
    "print(X.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#check again the correlation between the independenta variables:\n",
    "plot_corr(X,size=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['M', 'F', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA', 'VolumeCred',\n",
       "       'VolumeDebCashless_Card'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#create a test set (split the data into 80/20 and test aside the test set):\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "#split data into train and test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time to find those clients who are most likely to accept MUTUAL FUND offer:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    550\n",
      "1    131\n",
      "Name: Sale_MF, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(y_train['Sale_MF'].value_counts())\n",
    "#We see that our categories are imbalanced (there are more people who declined the offer).\n",
    "#It might cause problems when running models, as they will tend to predict zero outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time to create functions that will help us run ML models on cross-validation set, as well as calculate performance scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#further split train_set into test and train (using cross validation K=5)\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import confusion_matrix, make_scorer\n",
    "\n",
    "#write a function to compute accuracy score/ recall/ precision/ confusion matrix:\n",
    "def compute_score(clf, X, y):\n",
    "    xval = cross_val_score(clf, X, y, cv = 5, scoring ='accuracy')\n",
    "    return print('Accuracy: {0: .2f}%'.format(xval.mean()* 100))\n",
    "\n",
    "def compute_recall(clf, X, y):\n",
    "    recall = cross_val_score(clf, X, y, cv = 5, scoring ='recall')\n",
    "    return print('Recall: {0: .2f}%'.format(recall.mean()* 100))\n",
    "\n",
    "def compute_precision(clf, X, y):\n",
    "    prec = cross_val_score(clf, X, y, cv = 5, scoring ='precision')\n",
    "    return print('Precision: {0: .2f}%'.format(prec.mean()* 100))\n",
    "\n",
    "def compute_matrix(clf, X, y):\n",
    "    y_pred = cross_val_predict(clf, X, y, cv =5)\n",
    "    confusion_matrix(y, y_pred)\n",
    "    return print(confusion_matrix (y, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Let's run dirty models with cross-validation split and then compare the accuracy scores, precision, recall and build confusion matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  80.76%\n",
      "Recall:  0.00%\n",
      "Precision:  0.00%\n",
      "[[550   0]\n",
      " [131   0]]\n"
     ]
    }
   ],
   "source": [
    "#Model 1- Logistic Regression\n",
    "#run first 'dirty' logistic regression:\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression(max_iter = 2000)\n",
    "compute_score(lr, X_train, y_train['Sale_MF'])\n",
    "compute_recall(lr, X_train, y_train['Sale_MF'])\n",
    "compute_precision(lr, X_train, y_train['Sale_MF'])\n",
    "compute_matrix (lr, X_train, y_train['Sale_MF'])  \n",
    "\n",
    "#Unfortunately, our classes are imbalanced - there are more people who rejected the offer (y =0), than those who accepted it.\n",
    "#As a result, our model tends to predict mostly y=0 outcome.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Applying over-sampling technique for class-imbalanced data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 550, 1: 550}"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we noticed that we have 550 negative outcomes and 153 positive outcames. To solve the problem of class-imbalanced data\n",
    "#we need to apply SMOTE (oversampling technique) that will synthesize observations with positive outcome.\n",
    "sm = SMOTE(random_state = 42, ratio = 1)\n",
    "os_X_train, os_y_train = sm.fit_sample(X_train, y_train['Sale_MF'])\n",
    "\n",
    "#Now we see that we have 550 positive and 550 negative outcomes:\n",
    "unique, count = np.unique(os_y_train, return_counts = True)\n",
    "y_train_smote_values = {k:v for (k,v) in zip (unique, count)}\n",
    "y_train_smote_values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Let's re-run the model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  55.18%\n",
      "Recall:  56.18%\n",
      "Precision:  55.02%\n",
      "[[298 252]\n",
      " [241 309]]\n"
     ]
    }
   ],
   "source": [
    "#Model 1 - Logistic Regression:\n",
    "\n",
    "lr1 = LogisticRegression()\n",
    "compute_score(lr1, os_X_train, os_y_train)\n",
    "compute_recall(lr1, os_X_train, os_y_train)\n",
    "compute_precision(lr1, os_X_train, os_y_train) # high precision score\n",
    "compute_matrix (lr1,os_X_train, os_y_train)\n",
    "\n",
    "#the results have improved but are still not ideal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  77.82%\n",
      "Recall:  72.91%\n",
      "Precision:  77.27%\n",
      "[[434 116]\n",
      " [140 410]]\n"
     ]
    }
   ],
   "source": [
    "#Model 2 - Random Forests\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf1 = RandomForestClassifier()\n",
    "compute_score(rf1, os_X_train, os_y_train)\n",
    "compute_recall(rf1, os_X_train, os_y_train)\n",
    "compute_precision(rf1, os_X_train, os_y_train) #high precision score\n",
    "compute_matrix (rf1, os_X_train, os_y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  56.91%\n",
      "Recall:  64.91%\n",
      "Precision:  55.81%\n",
      "[[269 281]\n",
      " [193 357]]\n"
     ]
    }
   ],
   "source": [
    "#Model 3 - Naive Bayes\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "gs1 = GaussianNB()\n",
    "compute_score(gs1, os_X_train, os_y_train)\n",
    "compute_recall(gs1, os_X_train, os_y_train)\n",
    "compute_precision(gs1, os_X_train, os_y_train)\n",
    "compute_matrix (gs1, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  54.09%\n",
      "Recall:  62.73%\n",
      "Precision:  53.50%\n",
      "[[250 300]\n",
      " [205 345]]\n"
     ]
    }
   ],
   "source": [
    "#Model 4 - Support Vector Machine\n",
    "from sklearn import svm\n",
    "svm1 = svm.SVC()\n",
    "compute_score(svm1, os_X_train, os_y_train)\n",
    "compute_recall(svm1, os_X_train, os_y_train)\n",
    "compute_precision(svm1, os_X_train, os_y_train)\n",
    "compute_matrix (svm1, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  71.18%\n",
      "Recall:  89.45%\n",
      "Precision:  65.57%\n",
      "[[291 259]\n",
      " [ 58 492]]\n"
     ]
    }
   ],
   "source": [
    "# 5 - K Nearest Neighbours\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn1 = KNeighborsClassifier()\n",
    "compute_score(knn1, os_X_train, os_y_train)\n",
    "compute_recall(knn1, os_X_train, os_y_train)\n",
    "compute_precision(knn1, os_X_train, os_y_train)\n",
    "compute_matrix (knn1, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  70.73%\n",
      "Recall:  74.36%\n",
      "Precision:  68.68%\n",
      "[[363 187]\n",
      " [138 412]]\n"
     ]
    }
   ],
   "source": [
    "#Model 6 - Decision Trees\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt1 = DecisionTreeClassifier()\n",
    "compute_score(dt1, os_X_train, os_y_train)\n",
    "compute_recall(dt1, os_X_train, os_y_train)\n",
    "compute_precision(dt1, os_X_train, os_y_train)\n",
    "compute_matrix (dt1, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  63.91%\n",
      "Recall:  70.18%\n",
      "Precision:  62.20%\n",
      "[[317 233]\n",
      " [164 386]]\n"
     ]
    }
   ],
   "source": [
    "#Model 7 - AdaBoost Classifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "ada1 = AdaBoostClassifier()\n",
    "compute_score(ada1, os_X_train, os_y_train)\n",
    "compute_recall(ada1, os_X_train, os_y_train)\n",
    "compute_precision(ada1, os_X_train, os_y_train)\n",
    "compute_matrix (ada1, os_X_train, os_y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  70.64%\n",
      "Recall:  77.45%\n",
      "Precision:  67.70%\n",
      "[[351 199]\n",
      " [123 427]]\n"
     ]
    }
   ],
   "source": [
    "#Model 8 - Gradient Boosting Classifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gbc1 = GradientBoostingClassifier()\n",
    "compute_score(gbc1, os_X_train, os_y_train)\n",
    "compute_recall(gbc1, os_X_train, os_y_train)\n",
    "compute_precision(gbc1, os_X_train, os_y_train) #high precision score\n",
    "compute_matrix (gbc1, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time to fine-tune models with high precision score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since we need to choose only 100 customers to contact, precision metric is more important than recall.\n",
    "#Now we are going to fine-tune the 3 models with highest precision scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.806364 using {'max_features': 'auto', 'n_estimators': 1000}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "#Start with Model 2 - Random Forest:\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {\n",
    "            'n_estimators': [200, 700, 800, 1000],\n",
    "            'max_features': ['auto', 'sqrt', 'log2']\n",
    "            }\n",
    "\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(rf1, param_grid=param_grid)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train, os_y_train)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  81.73%\n",
      "Recall:  83.64%\n",
      "Precision:  80.96%\n",
      "[[437 113]\n",
      " [ 91 459]]\n"
     ]
    }
   ],
   "source": [
    "#Apply the hyperparameters:\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "rf2 = RandomForestClassifier(max_features= 'auto', n_estimators= 200)\n",
    "compute_score(rf2, os_X_train, os_y_train)\n",
    "compute_recall(rf2, os_X_train, os_y_train)\n",
    "compute_precision(rf2, os_X_train, os_y_train)\n",
    "compute_matrix (rf2, os_X_train, os_y_train)\n",
    "\n",
    "#We see that Precision increased from 89.40% to over 91%\n",
    "#Obviously, Random Forest Shows better results than other models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.758182 using {'n_neighbors': 3, 'weights': 'distance'}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "#Start with Model 5 - K Neighbours:\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {\n",
    "            'n_neighbors': [3, 5, 11, 19],\n",
    "            'weights': ['uniform', 'distance']\n",
    "            }\n",
    "\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(knn1, param_grid=param_grid)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train, os_y_train)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  75.82%\n",
      "Recall:  93.09%\n",
      "Precision:  69.31%\n",
      "[[322 228]\n",
      " [ 38 512]]\n"
     ]
    }
   ],
   "source": [
    "#apply hyperparameters:\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn2 = KNeighborsClassifier(n_neighbors = 3, weights = 'distance')\n",
    "compute_score(knn2, os_X_train, os_y_train)\n",
    "compute_recall(knn2, os_X_train, os_y_train)\n",
    "compute_precision(knn2, os_X_train, os_y_train)\n",
    "compute_matrix (knn2, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.710000 using {'max_leaf_nodes': 94, 'min_samples_split': 3}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "# Model 6 - Decision Trees:\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid =  {\n",
    "        'max_leaf_nodes': list(range(2, 100)), \n",
    "        'min_samples_split': [2, 3, 4]\n",
    "        }\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(dt1, param_grid=param_grid, cv = 5)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train, os_y_train)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  70.55%\n",
      "Recall:  74.73%\n",
      "Precision:  68.81%\n",
      "[[358 192]\n",
      " [138 412]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dt2 = DecisionTreeClassifier(max_leaf_nodes = 96, min_samples_split = 2)\n",
    "compute_score(dt2, os_X_train, os_y_train)\n",
    "compute_recall(dt2, os_X_train, os_y_train)\n",
    "compute_precision(dt2, os_X_train, os_y_train)\n",
    "compute_matrix (dt2, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.757273 using {'learning_rate': 0.5, 'n_estimators': 200}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "# Model 8 - GradientBoost:\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid =  {\n",
    "        'learning_rate' : [1, 0.5, 0.25, 0.1, 0.05, 0.01],\n",
    "        'n_estimators' : [1, 2, 4, 8, 16, 32, 64, 100, 200]\n",
    "        }\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(gbc1, param_grid=param_grid, cv = 5)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train, os_y_train)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  75.73%\n",
      "Recall:  78.73%\n",
      "Precision:  73.89%\n",
      "[[400 150]\n",
      " [117 433]]\n"
     ]
    }
   ],
   "source": [
    "#apply hyperparameters:\n",
    "\n",
    "from sklearn.datasets import make_hastie_10_2\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "gbc2 = GradientBoostingClassifier(learning_rate = 0.25, n_estimators = 200)\n",
    "score_GB = compute_score(gbc2, os_X_train, os_y_train)\n",
    "recall_GB = compute_recall(gbc2, os_X_train, os_y_train)\n",
    "precision_GB = compute_precision(gbc2, os_X_train, os_y_train) \n",
    "compute_matrix (gbc2, os_X_train, os_y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time to see how well our model performs on train set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Let's fit the chosen model to train data:\n",
    "rf2.fit(os_X_train, os_y_train)\n",
    "\n",
    "# Let's use rf2 to predict instances from the test set and store it:\n",
    "y_pred= rf2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[148  29]\n",
      " [ 36  15]]\n",
      "Accuracy:  71.49%\n",
      "Recall:  29.41%\n",
      "Precision:  34.09%\n"
     ]
    }
   ],
   "source": [
    "#Now let's see how well our model generalises test data.\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import confusion_matrix \n",
    "\n",
    "#Seems like the results are not that good.\n",
    "\n",
    "cm = confusion_matrix(y_test['Sale_MF'], y_pred)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(cm)\n",
    "accuracy = accuracy_score(y_test['Sale_MF'], y_pred)\n",
    "print('Accuracy: {0: .2f}%'.format(accuracy* 100))\n",
    "recall = recall_score(y_test['Sale_MF'], y_pred)\n",
    "print('Recall: {0: .2f}%'.format(recall* 100))\n",
    "precision = precision_score(y_test['Sale_MF'], y_pred)\n",
    "print('Precision: {0: .2f}%'.format(precision* 100))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area under the curve: 0.5651379195746096\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#calculate area under curve:\n",
    "from sklearn.metrics import roc_auc_score\n",
    "print('Area under the curve:', roc_auc_score(y_test['Sale_MF'],y_pred))\n",
    "\n",
    "from sklearn.metrics import roc_curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test['Sale_MF'], y_pred)\n",
    "plt.plot(fpr, tpr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Now it's time to apply our model to predict clients who are most likely to accept MF offer from the bank."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>M</th>\n",
       "      <th>F</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>ActBal_CA</th>\n",
       "      <th>VolumeCred</th>\n",
       "      <th>VolumeDebCashless_Card</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>153</td>\n",
       "      <td>1</td>\n",
       "      <td>1599.840714</td>\n",
       "      <td>1872.483571</td>\n",
       "      <td>526.037500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>5353.483929</td>\n",
       "      <td>4372.773929</td>\n",
       "      <td>832.175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>227</td>\n",
       "      <td>1</td>\n",
       "      <td>879.685000</td>\n",
       "      <td>387.504643</td>\n",
       "      <td>69.151071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>182</td>\n",
       "      <td>1</td>\n",
       "      <td>510.166429</td>\n",
       "      <td>527.175000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>29</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>253.458929</td>\n",
       "      <td>0.024643</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        M  F  Age  Tenure  Count_CA    ActBal_CA   VolumeCred  \\\n",
       "Client                                                          \n",
       "4       1  0   24     153         1  1599.840714  1872.483571   \n",
       "5       0  1   58     200         1  5353.483929  4372.773929   \n",
       "7       0  1   55     227         1   879.685000   387.504643   \n",
       "9       0  1   33     182         1   510.166429   527.175000   \n",
       "10      0  1   29      48         1   253.458929     0.024643   \n",
       "\n",
       "        VolumeDebCashless_Card  \n",
       "Client                          \n",
       "4                   526.037500  \n",
       "5                   832.175000  \n",
       "7                    69.151071  \n",
       "9                     0.000000  \n",
       "10                    0.000000  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we leave only those columns that were used for training the model:\n",
    "predict = predict[['M', 'F', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA', 'VolumeCred',\n",
    "       'VolumeDebCashless_Card']]\n",
    "predict.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scale and normalise features in predict data set:\n",
    "\n",
    "a = predict['Age']\n",
    "a1 = predict['Tenure']\n",
    "a2 = predict['ActBal_CA']\n",
    "a3 = predict['VolumeCred']\n",
    "a4 = predict['VolumeDebCashless_Card']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a = predict['Age']:\n",
    "\n",
    "a = a + 0.01\n",
    "at, maxlog, interval = stats.boxcox(a, alpha=0.05)\n",
    "at = (at-at.mean())/(at.max()-at.min())\n",
    "sns.kdeplot(at, shade=True, label=\"Transformed \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a1 = predict['Tenure']:\n",
    "\n",
    "a1 = a1 + 0.01\n",
    "at1, maxlog, interval = stats.boxcox(a1, alpha=0.05)\n",
    "at1 = (at1-at1.mean())/(at1.max()-at1.min())\n",
    "sns.kdeplot(at1, shade=True, label=\"Transformed \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a2 = predict[ActBal_CA]:\n",
    "\n",
    "a2 = a2 + 0.01\n",
    "at2, maxlog, interval = stats.boxcox(a2, alpha=0.05)\n",
    "at2 = (at2-at2.mean())/(at2.max()-at2.min())\n",
    "sns.kdeplot(at2, shade=True, label=\"Transformed \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a3 = predict[VolumeCred]:\n",
    "\n",
    "a3 = a3 + 0.01\n",
    "at3, maxlog, interval = stats.boxcox(a3, alpha=0.05)\n",
    "at3 = (at3-at3.mean())/(at3.max()-at3.min())\n",
    "sns.kdeplot(at3, shade=True, label=\"Transformed \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#a4 = predict[VolumeDebCashless_Card]:\n",
    "\n",
    "a4 = a4 + 0.01\n",
    "at4, maxlog, interval = stats.boxcox(a4, alpha=0.05)\n",
    "at4 = (at4-at4.mean())/(at4.max()-at4.min())\n",
    "sns.kdeplot(at4, shade=True, label=\"Transformed \");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#join transformed variables into a new DataFrame:\n",
    "\n",
    "Predict_MF = pd.DataFrame()\n",
    "Predict_MF['M'] = predict['M']\n",
    "Predict_MF['F'] = predict['F']\n",
    "Predict_MF['Age'] = at\n",
    "Predict_MF['Tenure'] = at1\n",
    "Predict_MF['Count_CA'] = predict['Count_CA']\n",
    "Predict_MF['ActBal_CA']= at2\n",
    "Predict_MF['VolumeCred']= at3\n",
    "Predict_MF['VolumeDebCashless_Card'] = at4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>M</th>\n",
       "      <th>F</th>\n",
       "      <th>Age</th>\n",
       "      <th>Tenure</th>\n",
       "      <th>Count_CA</th>\n",
       "      <th>ActBal_CA</th>\n",
       "      <th>VolumeCred</th>\n",
       "      <th>VolumeDebCashless_Card</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Client</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.315617</td>\n",
       "      <td>0.184269</td>\n",
       "      <td>1</td>\n",
       "      <td>0.111568</td>\n",
       "      <td>0.112177</td>\n",
       "      <td>0.479636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.193070</td>\n",
       "      <td>0.313030</td>\n",
       "      <td>1</td>\n",
       "      <td>0.218147</td>\n",
       "      <td>0.201243</td>\n",
       "      <td>0.515264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.159548</td>\n",
       "      <td>0.381975</td>\n",
       "      <td>1</td>\n",
       "      <td>0.065272</td>\n",
       "      <td>-0.017483</td>\n",
       "      <td>0.320589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.143437</td>\n",
       "      <td>0.265175</td>\n",
       "      <td>1</td>\n",
       "      <td>0.026433</td>\n",
       "      <td>0.004694</td>\n",
       "      <td>-0.400694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.214772</td>\n",
       "      <td>-0.177212</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.019168</td>\n",
       "      <td>-0.309030</td>\n",
       "      <td>-0.400694</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        M  F       Age    Tenure  Count_CA  ActBal_CA  VolumeCred  \\\n",
       "Client                                                              \n",
       "4       1  0 -0.315617  0.184269         1   0.111568    0.112177   \n",
       "5       0  1  0.193070  0.313030         1   0.218147    0.201243   \n",
       "7       0  1  0.159548  0.381975         1   0.065272   -0.017483   \n",
       "9       0  1 -0.143437  0.265175         1   0.026433    0.004694   \n",
       "10      0  1 -0.214772 -0.177212         1  -0.019168   -0.309030   \n",
       "\n",
       "        VolumeDebCashless_Card  \n",
       "Client                          \n",
       "4                     0.479636  \n",
       "5                     0.515264  \n",
       "7                     0.320589  \n",
       "9                    -0.400694  \n",
       "10                   -0.400694  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Predict_MF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(117, 489)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#predict score for clients:\n",
    "\n",
    "y_pred_new= rf2.predict(Predict_MF)\n",
    "\n",
    "np.count_nonzero(y_pred_new == 1), np.count_nonzero(y_pred_new == 0)\n",
    "#our model predicted that out of 606 clients, 75 have are likely to accept our offer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_new = pd.DataFrame(y_pred_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate probabilita score pf these customers:\n",
    "\n",
    "probability = pd.DataFrame(rf2.predict_proba(Predict_MF))\n",
    "probability = pd.DataFrame(probability.iloc[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Client</th>\n",
       "      <th>Probability</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>978</td>\n",
       "      <td>0.900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>301</td>\n",
       "      <td>0.865</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>579</td>\n",
       "      <td>0.855</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>685</td>\n",
       "      <td>0.855</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>976</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11</td>\n",
       "      <td>0.830</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1007</td>\n",
       "      <td>0.825</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1101</td>\n",
       "      <td>0.810</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>223</td>\n",
       "      <td>0.800</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>803</td>\n",
       "      <td>0.800</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Client  Probability  Label\n",
       "0     978        0.900      1\n",
       "1     301        0.865      1\n",
       "2     579        0.855      1\n",
       "3     685        0.855      1\n",
       "4     976        0.830      1\n",
       "5      11        0.830      1\n",
       "6    1007        0.825      1\n",
       "7    1101        0.810      1\n",
       "8     223        0.800      1\n",
       "9     803        0.800      1"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#put label and probability score into one table:\n",
    "\n",
    "index = np.array(predict.index).reshape((-1,1))[:,0:1]\n",
    "index = pd.DataFrame(index)\n",
    "merge_MF = pd.merge(index, probability, left_index=True, right_index=True)\n",
    "merge_MF_1 = pd.merge (merge_MF, y_pred_new,left_index=True, right_index=True )\n",
    "merge_MF_1.columns = ['Client',  'Probability', 'Label']\n",
    "no = merge_MF_1[merge_MF_1['Label'] == 0].index\n",
    "output_MF = merge_MF_1.sort_values(by = ['Probability'],ascending = False).drop(no).reset_index(drop = True)\n",
    "output_MF.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save results for future revenue prediction:\n",
    "\n",
    "contact_MF = output_MF.to_csv('~/Desktop/contact_MF.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "merge_MF = pd.merge(output_MF, predict, on='Client', how='left')\n",
    "merge_MF = merge_MF [['Client','Label', 'Probability' ,'M', 'F', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA',\n",
    "       'VolumeCred', 'VolumeDebCashless_Card']]\n",
    "#merge_MF.head()\n",
    "contact_MF = merge_MF.to_csv('~/Desktop/contact_MF1.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting possible clients for Credit Card."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    507\n",
      "1    174\n",
      "Name: Sale_CC, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(y_train['Sale_CC'].value_counts())\n",
    "#We see that our categories are imbalanced (there are more people who declined the offer).\n",
    "#It might cause problems when running models, as they will tend to predict zero outcomes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 507, 1: 507}"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we noticed that we have 507 negative outcomes and 174 positive outcames. To solve the problem of class-imbalanced data\n",
    "#we need to apply SMOTE (oversampling technique) that will synthesize observations with positive outcome.\n",
    "sm1 = SMOTE(random_state = 42, ratio = 1)\n",
    "os_X_train_CC, os_y_train_CC = sm1.fit_sample(X_train, y_train['Sale_CC'])\n",
    "\n",
    "#Now we see that we have 507 positive and 507 negative outcomes:\n",
    "unique, count = np.unique(os_y_train_CC, return_counts = True)\n",
    "y_train_smote_values = {k:v for (k,v) in zip (unique, count)}\n",
    "y_train_smote_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  71.12%\n",
      "Recall:  72.42%\n",
      "Precision:  71.78%\n",
      "[[388 119]\n",
      " [149 358]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_CC = RandomForestClassifier()\n",
    "compute_score(rf_CC, os_X_train_CC, os_y_train_CC)\n",
    "compute_recall(rf_CC, os_X_train_CC, os_y_train_CC)\n",
    "compute_precision(rf_CC, os_X_train_CC, os_y_train_CC) #high precision score\n",
    "compute_matrix (rf_CC, os_X_train_CC, os_y_train_CC)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.755424 using {'max_features': 'sqrt', 'n_estimators': 200}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {\n",
    "            'n_estimators': [200, 700, 800, 1000],\n",
    "            'max_features': ['auto', 'sqrt', 'log2']\n",
    "            }\n",
    "\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(rf_CC, param_grid=param_grid)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train_CC, os_y_train_CC)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  75.96%\n",
      "Recall:  78.36%\n",
      "Precision:  74.38%\n",
      "[[374 133]\n",
      " [110 397]]\n"
     ]
    }
   ],
   "source": [
    "#Apply the hyperparameters:\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "rf2_CC = RandomForestClassifier(max_features= 'auto', n_estimators= 700)\n",
    "compute_score(rf2_CC, os_X_train_CC, os_y_train_CC)\n",
    "compute_recall(rf2_CC, os_X_train_CC, os_y_train_CC)\n",
    "compute_precision(rf2_CC, os_X_train_CC, os_y_train_CC)\n",
    "compute_matrix (rf2_CC, os_X_train_CC, os_y_train_CC)\n",
    "\n",
    "#We see that Precision increased from 89.40% to over 91%\n",
    "#Obviously, Random Forest Shows better results than other models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Let's fit the chosen model to train data:\n",
    "rf2_CC.fit(os_X_train_CC, os_y_train_CC)\n",
    "\n",
    "# Let's use rf2 to predict instances from the test set and store it:\n",
    "y_pred_CC= rf2_CC.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[134  36]\n",
      " [ 47  11]]\n",
      "Accuracy:  63.60%\n",
      "Recall:  18.97%\n",
      "Precision:  23.40%\n"
     ]
    }
   ],
   "source": [
    "#Now let's see how well our model generalises test data.\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import confusion_matrix \n",
    "\n",
    "#Seems like the results are not that good.\n",
    "\n",
    "cm1 = confusion_matrix(y_test['Sale_CC'], y_pred_CC)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(cm1)\n",
    "accuracy = accuracy_score(y_test['Sale_CC'], y_pred_CC)\n",
    "print('Accuracy: {0: .2f}%'.format(accuracy* 100))\n",
    "recall = recall_score(y_test['Sale_CC'], y_pred_CC)\n",
    "print('Recall: {0: .2f}%'.format(recall* 100))\n",
    "precision = precision_score(y_test['Sale_CC'], y_pred_CC)\n",
    "print('Precision: {0: .2f}%'.format(precision* 100))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(125, 481)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_new_CC= rf2_CC.predict(Predict_MF)\n",
    "\n",
    "np.count_nonzero(y_pred_new_CC == 1), np.count_nonzero(y_pred_new_CC == 0)\n",
    "#our model predicted that out of 606 clients, 121 have are likely to accept our offer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_new_CC = pd.DataFrame(y_pred_new_CC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "probability_CC = pd.DataFrame(rf2_CC.predict_proba(Predict_MF))\n",
    "probability_CC = pd.DataFrame(probability_CC.iloc[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Client</th>\n",
       "      <th>Probability</th>\n",
       "      <th>Label_CC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1138</td>\n",
       "      <td>0.954286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>74</td>\n",
       "      <td>0.865714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>797</td>\n",
       "      <td>0.841429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>369</td>\n",
       "      <td>0.821429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1410</td>\n",
       "      <td>0.815714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>813</td>\n",
       "      <td>0.811429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>769</td>\n",
       "      <td>0.798571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>994</td>\n",
       "      <td>0.791429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>423</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1150</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Client  Probability  Label_CC\n",
       "0    1138     0.954286         1\n",
       "1      74     0.865714         1\n",
       "2     797     0.841429         1\n",
       "3     369     0.821429         1\n",
       "4    1410     0.815714         1\n",
       "5     813     0.811429         1\n",
       "6     769     0.798571         1\n",
       "7     994     0.791429         1\n",
       "8     423     0.785714         1\n",
       "9    1150     0.785714         1"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#put label and probability score into one table:\n",
    "\n",
    "index = np.array(predict.index).reshape((-1,1))[:,0:1]\n",
    "index = pd.DataFrame(index)\n",
    "merge_CC = pd.merge(index, probability_CC, left_index=True, right_index=True)\n",
    "merge_CC_1 = pd.merge (merge_CC, y_pred_new_CC,left_index=True, right_index=True )\n",
    "merge_CC_1.columns = ['Client',  'Probability', 'Label_CC']\n",
    "no_CC = merge_CC_1[merge_CC_1['Label_CC'] == 0].index\n",
    "output_CC = merge_CC_1.sort_values(by = ['Probability'],ascending = False).drop(no_CC).reset_index(drop = True)\n",
    "output_CC.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save results for future revenue prediction:\n",
    "\n",
    "contact_CC = output_CC.to_csv('~/Desktop/contact_CC.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "merge_CC = pd.merge(output_CC, predict, on='Client', how='left')\n",
    "merge_CC = merge_CC [['Client','Label_CC', 'Probability' ,'M', 'F', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA',\n",
    "       'VolumeCred', 'VolumeDebCashless_Card']]\n",
    "#merge_MF.head()\n",
    "contact_CC = merge_CC.to_csv('~/Desktop/contact_CC1.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Possible clients for Consumer Loan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    481\n",
      "1    200\n",
      "Name: Sale_CL, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(y_train['Sale_CL'].value_counts())\n",
    "#We see that our categories are imbalanced (there are more people who declined the offer).\n",
    "#It might cause problems when running models, as they will tend to predict zero outcomes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 481, 1: 481}"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#we noticed that we have 481 negative outcomes and 200 positive outcames. To solve the problem of class-imbalanced data\n",
    "#we need to apply SMOTE (oversampling technique) that will synthesize observations with positive outcome.\n",
    "sm2 = SMOTE(random_state = 42, ratio = 1)\n",
    "os_X_train_CL, os_y_train_CL = sm1.fit_sample(X_train, y_train['Sale_CL'])\n",
    "\n",
    "#Now we see that we have 481 positive and 481 negative outcomes:\n",
    "unique, count = np.unique(os_y_train_CL, return_counts = True)\n",
    "y_train_smote_values = {k:v for (k,v) in zip (unique, count)}\n",
    "y_train_smote_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy:  72.05%\n",
      "Recall:  71.97%\n",
      "Precision:  72.77%\n",
      "[[362 119]\n",
      " [139 342]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_CL = RandomForestClassifier()\n",
    "compute_score(rf_CL, os_X_train_CL, os_y_train_CL)\n",
    "compute_recall(rf_CL, os_X_train_CL, os_y_train_CL)\n",
    "compute_precision(rf_CL, os_X_train_CL, os_y_train_CL) #high precision score\n",
    "compute_matrix (rf_CL, os_X_train_CL, os_y_train_CL)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.767152 using {'max_features': 'auto', 'n_estimators': 700}\n"
     ]
    }
   ],
   "source": [
    "#Apply GridSearch to find best hyperparameters.\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {\n",
    "            'n_estimators': [200, 700, 800, 1000],\n",
    "            'max_features': ['auto', 'sqrt', 'log2']\n",
    "            }\n",
    "\n",
    "#Instantiate GridSearchCV with the required parameters\n",
    "grid_model = GridSearchCV(rf_CL, param_grid=param_grid)\n",
    "\n",
    "#Fit data to grid_model\n",
    "grid_model_result = grid_model.fit(os_X_train_CL, os_y_train_CL)\n",
    "\n",
    "#Summarize results\n",
    "best_params = grid_model_result.best_params_\n",
    "best_score = grid_model_result.best_score_\n",
    "print(\"Best: %f using %s\" % (best_score, best_params))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'auto' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-110-7384079e3aa2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mrf2_CL\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mauto\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_estimators\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m700\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mcompute_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrf2_CL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos_X_train_CL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos_y_train_CL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mcompute_recall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrf2_CL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos_X_train_CL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos_y_train_CL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'auto' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "rf2_CL = RandomForestClassifier(max_features = auto, n_estimators = 700)\n",
    "compute_score(rf2_CL, os_X_train_CL, os_y_train_CL)\n",
    "compute_recall(rf2_CL, os_X_train_CL, os_y_train_CL)\n",
    "compute_precision(rf2_CL, os_X_train_CL, os_y_train_CL)\n",
    "compute_matrix (rf2_CL, os_X_train_CL, os_y_train_CL)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Let's fit the chosen model to train data:\n",
    "rf2_CL.fit(os_X_train_CL, os_y_train_CL)\n",
    "\n",
    "# Let's use rf2 to predict instances from the test set and store it:\n",
    "y_pred_CL= rf2_CL.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[130  40]\n",
      " [ 38  20]]\n",
      "Accuracy:  65.79%\n",
      "Recall:  34.48%\n",
      "Precision:  33.33%\n"
     ]
    }
   ],
   "source": [
    "#Now let's see how well our model generalises test data.\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import confusion_matrix \n",
    "\n",
    "#Seems like the results are not that good.\n",
    "\n",
    "cm2 = confusion_matrix(y_test['Sale_CL'], y_pred_CL)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(cm2)\n",
    "accuracy = accuracy_score(y_test['Sale_CL'], y_pred_CL)\n",
    "print('Accuracy: {0: .2f}%'.format(accuracy* 100))\n",
    "recall = recall_score(y_test['Sale_CL'], y_pred_CL)\n",
    "print('Recall: {0: .2f}%'.format(recall* 100))\n",
    "precision = precision_score(y_test['Sale_CL'], y_pred_CL)\n",
    "print('Precision: {0: .2f}%'.format(precision* 100))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(143, 463)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_new_CL= rf2_CL.predict(Predict_MF)\n",
    "\n",
    "np.count_nonzero(y_pred_new_CL == 1), np.count_nonzero(y_pred_new_CL == 0)\n",
    "#our model predicted that out of 606 clients, 92 are likely to accept our offer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_new_CL = pd.DataFrame(y_pred_new_CL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "probability_CL = pd.DataFrame(rf2_CL.predict_proba(Predict_MF))\n",
    "probability_CL = pd.DataFrame(probability_CL.iloc[:, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Client</th>\n",
       "      <th>Probability</th>\n",
       "      <th>Label_CL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>710</td>\n",
       "      <td>0.905714</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1123</td>\n",
       "      <td>0.881429</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>0.868571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>498</td>\n",
       "      <td>0.854286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30</td>\n",
       "      <td>0.850000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>832</td>\n",
       "      <td>0.850000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>265</td>\n",
       "      <td>0.828571</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>231</td>\n",
       "      <td>0.824286</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>571</td>\n",
       "      <td>0.822857</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>126</td>\n",
       "      <td>0.817143</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Client  Probability  Label_CL\n",
       "0     710     0.905714         1\n",
       "1    1123     0.881429         1\n",
       "2       9     0.868571         1\n",
       "3     498     0.854286         1\n",
       "4      30     0.850000         1\n",
       "5     832     0.850000         1\n",
       "6     265     0.828571         1\n",
       "7     231     0.824286         1\n",
       "8     571     0.822857         1\n",
       "9     126     0.817143         1"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#put label and probability score into one table:\n",
    "\n",
    "index = np.array(predict.index).reshape((-1,1))[:,0:1]\n",
    "index = pd.DataFrame(index)\n",
    "merge_CL = pd.merge(index, probability_CL, left_index=True, right_index=True)\n",
    "merge_CL_1 = pd.merge (merge_CL, y_pred_new_CL,left_index=True, right_index=True )\n",
    "merge_CL_1.columns = ['Client',  'Probability', 'Label_CL']\n",
    "no_CL = merge_CL_1[merge_CL_1['Label_CL'] == 0].index\n",
    "output_CL = merge_CL_1.sort_values(by = ['Probability'],ascending = False).drop(no_CL).reset_index(drop = True)\n",
    "output_CL.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save results for future revenue prediction:\n",
    "contact_CL = output_CL.to_csv('~/Desktop/contact_CL.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "merge_CL = pd.merge(output_CL, predict, on='Client', how='left')\n",
    "merge_CL = merge_CL [['Client','Label_CL', 'Probability' ,'M', 'F', 'Age', 'Tenure', 'Count_CA', 'ActBal_CA',\n",
    "       'VolumeCred', 'VolumeDebCashless_Card']]\n",
    "#merge_MF.head()\n",
    "contact_CL = merge_CL.to_csv('~/Desktop/contact_CL1.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
